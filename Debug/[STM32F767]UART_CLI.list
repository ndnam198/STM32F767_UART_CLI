
[STM32F767]UART_CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  080055e0  080055e0  000155e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba4  08005ba4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bac  08005bac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000070  08005c24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08005c24  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001496b  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b7f  00000000  00000000  00034a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f38  00000000  00000000  00037588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  000384c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005760  00000000  00000000  00039270  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012246  00000000  00000000  0003e9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001072a5  00000000  00000000  00050c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00157ebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000443c  00000000  00000000  00157f38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080055c8 	.word	0x080055c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080055c8 	.word	0x080055c8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_uldivmod>:
 8000300:	b953      	cbnz	r3, 8000318 <__aeabi_uldivmod+0x18>
 8000302:	b94a      	cbnz	r2, 8000318 <__aeabi_uldivmod+0x18>
 8000304:	2900      	cmp	r1, #0
 8000306:	bf08      	it	eq
 8000308:	2800      	cmpeq	r0, #0
 800030a:	bf1c      	itt	ne
 800030c:	f04f 31ff 	movne.w	r1, #4294967295
 8000310:	f04f 30ff 	movne.w	r0, #4294967295
 8000314:	f000 b972 	b.w	80005fc <__aeabi_idiv0>
 8000318:	f1ad 0c08 	sub.w	ip, sp, #8
 800031c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000320:	f000 f806 	bl	8000330 <__udivmoddi4>
 8000324:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032c:	b004      	add	sp, #16
 800032e:	4770      	bx	lr

08000330 <__udivmoddi4>:
 8000330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000334:	9e08      	ldr	r6, [sp, #32]
 8000336:	4604      	mov	r4, r0
 8000338:	4688      	mov	r8, r1
 800033a:	2b00      	cmp	r3, #0
 800033c:	d14b      	bne.n	80003d6 <__udivmoddi4+0xa6>
 800033e:	428a      	cmp	r2, r1
 8000340:	4615      	mov	r5, r2
 8000342:	d967      	bls.n	8000414 <__udivmoddi4+0xe4>
 8000344:	fab2 f282 	clz	r2, r2
 8000348:	b14a      	cbz	r2, 800035e <__udivmoddi4+0x2e>
 800034a:	f1c2 0720 	rsb	r7, r2, #32
 800034e:	fa01 f302 	lsl.w	r3, r1, r2
 8000352:	fa20 f707 	lsr.w	r7, r0, r7
 8000356:	4095      	lsls	r5, r2
 8000358:	ea47 0803 	orr.w	r8, r7, r3
 800035c:	4094      	lsls	r4, r2
 800035e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fbb8 f7fe 	udiv	r7, r8, lr
 8000368:	fa1f fc85 	uxth.w	ip, r5
 800036c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000370:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000374:	fb07 f10c 	mul.w	r1, r7, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d909      	bls.n	8000390 <__udivmoddi4+0x60>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000382:	f080 811b 	bcs.w	80005bc <__udivmoddi4+0x28c>
 8000386:	4299      	cmp	r1, r3
 8000388:	f240 8118 	bls.w	80005bc <__udivmoddi4+0x28c>
 800038c:	3f02      	subs	r7, #2
 800038e:	442b      	add	r3, r5
 8000390:	1a5b      	subs	r3, r3, r1
 8000392:	b2a4      	uxth	r4, r4
 8000394:	fbb3 f0fe 	udiv	r0, r3, lr
 8000398:	fb0e 3310 	mls	r3, lr, r0, r3
 800039c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x8c>
 80003a8:	192c      	adds	r4, r5, r4
 80003aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ae:	f080 8107 	bcs.w	80005c0 <__udivmoddi4+0x290>
 80003b2:	45a4      	cmp	ip, r4
 80003b4:	f240 8104 	bls.w	80005c0 <__udivmoddi4+0x290>
 80003b8:	3802      	subs	r0, #2
 80003ba:	442c      	add	r4, r5
 80003bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003c0:	eba4 040c 	sub.w	r4, r4, ip
 80003c4:	2700      	movs	r7, #0
 80003c6:	b11e      	cbz	r6, 80003d0 <__udivmoddi4+0xa0>
 80003c8:	40d4      	lsrs	r4, r2
 80003ca:	2300      	movs	r3, #0
 80003cc:	e9c6 4300 	strd	r4, r3, [r6]
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0xbe>
 80003da:	2e00      	cmp	r6, #0
 80003dc:	f000 80eb 	beq.w	80005b6 <__udivmoddi4+0x286>
 80003e0:	2700      	movs	r7, #0
 80003e2:	e9c6 0100 	strd	r0, r1, [r6]
 80003e6:	4638      	mov	r0, r7
 80003e8:	4639      	mov	r1, r7
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f783 	clz	r7, r3
 80003f2:	2f00      	cmp	r7, #0
 80003f4:	d147      	bne.n	8000486 <__udivmoddi4+0x156>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0xd0>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80fa 	bhi.w	80005f4 <__udivmoddi4+0x2c4>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0303 	sbc.w	r3, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	4698      	mov	r8, r3
 800040a:	2e00      	cmp	r6, #0
 800040c:	d0e0      	beq.n	80003d0 <__udivmoddi4+0xa0>
 800040e:	e9c6 4800 	strd	r4, r8, [r6]
 8000412:	e7dd      	b.n	80003d0 <__udivmoddi4+0xa0>
 8000414:	b902      	cbnz	r2, 8000418 <__udivmoddi4+0xe8>
 8000416:	deff      	udf	#255	; 0xff
 8000418:	fab2 f282 	clz	r2, r2
 800041c:	2a00      	cmp	r2, #0
 800041e:	f040 808f 	bne.w	8000540 <__udivmoddi4+0x210>
 8000422:	1b49      	subs	r1, r1, r5
 8000424:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000428:	fa1f f885 	uxth.w	r8, r5
 800042c:	2701      	movs	r7, #1
 800042e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000432:	0c23      	lsrs	r3, r4, #16
 8000434:	fb0e 111c 	mls	r1, lr, ip, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb08 f10c 	mul.w	r1, r8, ip
 8000440:	4299      	cmp	r1, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x124>
 8000444:	18eb      	adds	r3, r5, r3
 8000446:	f10c 30ff 	add.w	r0, ip, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x122>
 800044c:	4299      	cmp	r1, r3
 800044e:	f200 80cd 	bhi.w	80005ec <__udivmoddi4+0x2bc>
 8000452:	4684      	mov	ip, r0
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb1 f0fe 	udiv	r0, r1, lr
 800045c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000460:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000464:	fb08 f800 	mul.w	r8, r8, r0
 8000468:	45a0      	cmp	r8, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x14c>
 800046c:	192c      	adds	r4, r5, r4
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x14a>
 8000474:	45a0      	cmp	r8, r4
 8000476:	f200 80b6 	bhi.w	80005e6 <__udivmoddi4+0x2b6>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 0408 	sub.w	r4, r4, r8
 8000480:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000484:	e79f      	b.n	80003c6 <__udivmoddi4+0x96>
 8000486:	f1c7 0c20 	rsb	ip, r7, #32
 800048a:	40bb      	lsls	r3, r7
 800048c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000490:	ea4e 0e03 	orr.w	lr, lr, r3
 8000494:	fa01 f407 	lsl.w	r4, r1, r7
 8000498:	fa20 f50c 	lsr.w	r5, r0, ip
 800049c:	fa21 f30c 	lsr.w	r3, r1, ip
 80004a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004a4:	4325      	orrs	r5, r4
 80004a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004aa:	0c2c      	lsrs	r4, r5, #16
 80004ac:	fb08 3319 	mls	r3, r8, r9, r3
 80004b0:	fa1f fa8e 	uxth.w	sl, lr
 80004b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004b8:	fb09 f40a 	mul.w	r4, r9, sl
 80004bc:	429c      	cmp	r4, r3
 80004be:	fa02 f207 	lsl.w	r2, r2, r7
 80004c2:	fa00 f107 	lsl.w	r1, r0, r7
 80004c6:	d90b      	bls.n	80004e0 <__udivmoddi4+0x1b0>
 80004c8:	eb1e 0303 	adds.w	r3, lr, r3
 80004cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d0:	f080 8087 	bcs.w	80005e2 <__udivmoddi4+0x2b2>
 80004d4:	429c      	cmp	r4, r3
 80004d6:	f240 8084 	bls.w	80005e2 <__udivmoddi4+0x2b2>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4473      	add	r3, lr
 80004e0:	1b1b      	subs	r3, r3, r4
 80004e2:	b2ad      	uxth	r5, r5
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004f4:	45a2      	cmp	sl, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x1da>
 80004f8:	eb1e 0404 	adds.w	r4, lr, r4
 80004fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000500:	d26b      	bcs.n	80005da <__udivmoddi4+0x2aa>
 8000502:	45a2      	cmp	sl, r4
 8000504:	d969      	bls.n	80005da <__udivmoddi4+0x2aa>
 8000506:	3802      	subs	r0, #2
 8000508:	4474      	add	r4, lr
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	fba0 8902 	umull	r8, r9, r0, r2
 8000512:	eba4 040a 	sub.w	r4, r4, sl
 8000516:	454c      	cmp	r4, r9
 8000518:	46c2      	mov	sl, r8
 800051a:	464b      	mov	r3, r9
 800051c:	d354      	bcc.n	80005c8 <__udivmoddi4+0x298>
 800051e:	d051      	beq.n	80005c4 <__udivmoddi4+0x294>
 8000520:	2e00      	cmp	r6, #0
 8000522:	d069      	beq.n	80005f8 <__udivmoddi4+0x2c8>
 8000524:	ebb1 050a 	subs.w	r5, r1, sl
 8000528:	eb64 0403 	sbc.w	r4, r4, r3
 800052c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000530:	40fd      	lsrs	r5, r7
 8000532:	40fc      	lsrs	r4, r7
 8000534:	ea4c 0505 	orr.w	r5, ip, r5
 8000538:	e9c6 5400 	strd	r5, r4, [r6]
 800053c:	2700      	movs	r7, #0
 800053e:	e747      	b.n	80003d0 <__udivmoddi4+0xa0>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f703 	lsr.w	r7, r0, r3
 8000548:	4095      	lsls	r5, r2
 800054a:	fa01 f002 	lsl.w	r0, r1, r2
 800054e:	fa21 f303 	lsr.w	r3, r1, r3
 8000552:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000556:	4338      	orrs	r0, r7
 8000558:	0c01      	lsrs	r1, r0, #16
 800055a:	fbb3 f7fe 	udiv	r7, r3, lr
 800055e:	fa1f f885 	uxth.w	r8, r5
 8000562:	fb0e 3317 	mls	r3, lr, r7, r3
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb07 f308 	mul.w	r3, r7, r8
 800056e:	428b      	cmp	r3, r1
 8000570:	fa04 f402 	lsl.w	r4, r4, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x256>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f107 3cff 	add.w	ip, r7, #4294967295
 800057c:	d22f      	bcs.n	80005de <__udivmoddi4+0x2ae>
 800057e:	428b      	cmp	r3, r1
 8000580:	d92d      	bls.n	80005de <__udivmoddi4+0x2ae>
 8000582:	3f02      	subs	r7, #2
 8000584:	4429      	add	r1, r5
 8000586:	1acb      	subs	r3, r1, r3
 8000588:	b281      	uxth	r1, r0
 800058a:	fbb3 f0fe 	udiv	r0, r3, lr
 800058e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000592:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000596:	fb00 f308 	mul.w	r3, r0, r8
 800059a:	428b      	cmp	r3, r1
 800059c:	d907      	bls.n	80005ae <__udivmoddi4+0x27e>
 800059e:	1869      	adds	r1, r5, r1
 80005a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005a4:	d217      	bcs.n	80005d6 <__udivmoddi4+0x2a6>
 80005a6:	428b      	cmp	r3, r1
 80005a8:	d915      	bls.n	80005d6 <__udivmoddi4+0x2a6>
 80005aa:	3802      	subs	r0, #2
 80005ac:	4429      	add	r1, r5
 80005ae:	1ac9      	subs	r1, r1, r3
 80005b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005b4:	e73b      	b.n	800042e <__udivmoddi4+0xfe>
 80005b6:	4637      	mov	r7, r6
 80005b8:	4630      	mov	r0, r6
 80005ba:	e709      	b.n	80003d0 <__udivmoddi4+0xa0>
 80005bc:	4607      	mov	r7, r0
 80005be:	e6e7      	b.n	8000390 <__udivmoddi4+0x60>
 80005c0:	4618      	mov	r0, r3
 80005c2:	e6fb      	b.n	80003bc <__udivmoddi4+0x8c>
 80005c4:	4541      	cmp	r1, r8
 80005c6:	d2ab      	bcs.n	8000520 <__udivmoddi4+0x1f0>
 80005c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005cc:	eb69 020e 	sbc.w	r2, r9, lr
 80005d0:	3801      	subs	r0, #1
 80005d2:	4613      	mov	r3, r2
 80005d4:	e7a4      	b.n	8000520 <__udivmoddi4+0x1f0>
 80005d6:	4660      	mov	r0, ip
 80005d8:	e7e9      	b.n	80005ae <__udivmoddi4+0x27e>
 80005da:	4618      	mov	r0, r3
 80005dc:	e795      	b.n	800050a <__udivmoddi4+0x1da>
 80005de:	4667      	mov	r7, ip
 80005e0:	e7d1      	b.n	8000586 <__udivmoddi4+0x256>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e77c      	b.n	80004e0 <__udivmoddi4+0x1b0>
 80005e6:	3802      	subs	r0, #2
 80005e8:	442c      	add	r4, r5
 80005ea:	e747      	b.n	800047c <__udivmoddi4+0x14c>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	442b      	add	r3, r5
 80005f2:	e72f      	b.n	8000454 <__udivmoddi4+0x124>
 80005f4:	4638      	mov	r0, r7
 80005f6:	e708      	b.n	800040a <__udivmoddi4+0xda>
 80005f8:	4637      	mov	r7, r6
 80005fa:	e6e9      	b.n	80003d0 <__udivmoddi4+0xa0>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08c      	sub	sp, #48	; 0x30
 8000604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b59      	ldr	r3, [pc, #356]	; (800077c <MX_GPIO_Init+0x17c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a58      	ldr	r2, [pc, #352]	; (800077c <MX_GPIO_Init+0x17c>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b56      	ldr	r3, [pc, #344]	; (800077c <MX_GPIO_Init+0x17c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	61bb      	str	r3, [r7, #24]
 800062c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062e:	4b53      	ldr	r3, [pc, #332]	; (800077c <MX_GPIO_Init+0x17c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a52      	ldr	r2, [pc, #328]	; (800077c <MX_GPIO_Init+0x17c>)
 8000634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b50      	ldr	r3, [pc, #320]	; (800077c <MX_GPIO_Init+0x17c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b4d      	ldr	r3, [pc, #308]	; (800077c <MX_GPIO_Init+0x17c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a4c      	ldr	r2, [pc, #304]	; (800077c <MX_GPIO_Init+0x17c>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b4a      	ldr	r3, [pc, #296]	; (800077c <MX_GPIO_Init+0x17c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b47      	ldr	r3, [pc, #284]	; (800077c <MX_GPIO_Init+0x17c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a46      	ldr	r2, [pc, #280]	; (800077c <MX_GPIO_Init+0x17c>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b44      	ldr	r3, [pc, #272]	; (800077c <MX_GPIO_Init+0x17c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000676:	4b41      	ldr	r3, [pc, #260]	; (800077c <MX_GPIO_Init+0x17c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a40      	ldr	r2, [pc, #256]	; (800077c <MX_GPIO_Init+0x17c>)
 800067c:	f043 0310 	orr.w	r3, r3, #16
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b3e      	ldr	r3, [pc, #248]	; (800077c <MX_GPIO_Init+0x17c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0310 	and.w	r3, r3, #16
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	4b3b      	ldr	r3, [pc, #236]	; (800077c <MX_GPIO_Init+0x17c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a3a      	ldr	r2, [pc, #232]	; (800077c <MX_GPIO_Init+0x17c>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b38      	ldr	r3, [pc, #224]	; (800077c <MX_GPIO_Init+0x17c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006a6:	4b35      	ldr	r3, [pc, #212]	; (800077c <MX_GPIO_Init+0x17c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a34      	ldr	r2, [pc, #208]	; (800077c <MX_GPIO_Init+0x17c>)
 80006ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b32      	ldr	r3, [pc, #200]	; (800077c <MX_GPIO_Init+0x17c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80006c4:	482e      	ldr	r0, [pc, #184]	; (8000780 <MX_GPIO_Init+0x180>)
 80006c6:	f001 fa65 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	482d      	ldr	r0, [pc, #180]	; (8000784 <MX_GPIO_Init+0x184>)
 80006d0:	f001 fa60 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <MX_GPIO_Init+0x188>)
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	4619      	mov	r1, r3
 80006e8:	4828      	ldr	r0, [pc, #160]	; (800078c <MX_GPIO_Init+0x18c>)
 80006ea:	f001 f8a9 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80006ee:	f244 0381 	movw	r3, #16513	; 0x4081
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	481e      	ldr	r0, [pc, #120]	; (8000780 <MX_GPIO_Init+0x180>)
 8000708:	f001 f89a 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 800070c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800071e:	2307      	movs	r3, #7
 8000720:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4819      	ldr	r0, [pc, #100]	; (8000790 <MX_GPIO_Init+0x190>)
 800072a:	f001 f889 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800072e:	2340      	movs	r3, #64	; 0x40
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	4619      	mov	r1, r3
 8000744:	480f      	ldr	r0, [pc, #60]	; (8000784 <MX_GPIO_Init+0x184>)
 8000746:	f001 f87b 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <MX_GPIO_Init+0x184>)
 800075e:	f001 f86f 	bl	8001840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2028      	movs	r0, #40	; 0x28
 8000768:	f001 f811 	bl	800178e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800076c:	2028      	movs	r0, #40	; 0x28
 800076e:	f001 f82a 	bl	80017c6 <HAL_NVIC_EnableIRQ>
}
 8000772:	bf00      	nop
 8000774:	3730      	adds	r7, #48	; 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40020400 	.word	0x40020400
 8000784:	40021800 	.word	0x40021800
 8000788:	10110000 	.word	0x10110000
 800078c:	40020800 	.word	0x40020800
 8000790:	40020c00 	.word	0x40020c00

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000798:	f000 fe93 	bl	80014c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079c:	f000 f85c 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a0:	f7ff ff2e 	bl	8000600 <MX_GPIO_Init>
  MX_TIM14_Init();
 80007a4:	f000 fdce 	bl	8001344 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  vUART_CLI_Init(&huart7, &uart_receive_handle);
 80007a8:	4922      	ldr	r1, [pc, #136]	; (8000834 <main+0xa0>)
 80007aa:	4823      	ldr	r0, [pc, #140]	; (8000838 <main+0xa4>)
 80007ac:	f000 f93e 	bl	8000a2c <vUART_CLI_Init>

  OFF_ALL_LED();
 80007b0:	2200      	movs	r2, #0
 80007b2:	2101      	movs	r1, #1
 80007b4:	4821      	ldr	r0, [pc, #132]	; (800083c <main+0xa8>)
 80007b6:	f001 f9ed 	bl	8001b94 <HAL_GPIO_WritePin>
 80007ba:	2200      	movs	r2, #0
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	481f      	ldr	r0, [pc, #124]	; (800083c <main+0xa8>)
 80007c0:	f001 f9e8 	bl	8001b94 <HAL_GPIO_WritePin>
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ca:	481c      	ldr	r0, [pc, #112]	; (800083c <main+0xa8>)
 80007cc:	f001 f9e2 	bl	8001b94 <HAL_GPIO_WritePin>
  __RETARGET_INIT(DEBUG_USART);
 80007d0:	4819      	ldr	r0, [pc, #100]	; (8000838 <main+0xa4>)
 80007d2:	f000 fc37 	bl	8001044 <RetargetInit>

  __PRINT_RESET_CAUSE();
 80007d6:	481a      	ldr	r0, [pc, #104]	; (8000840 <main+0xac>)
 80007d8:	f003 ff6c 	bl	80046b4 <puts>
 80007dc:	4819      	ldr	r0, [pc, #100]	; (8000844 <main+0xb0>)
 80007de:	f003 ff69 	bl	80046b4 <puts>
 80007e2:	f000 fac5 	bl	8000d70 <resetCauseGet>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fb13 	bl	8000e14 <resetCauseGetName>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4619      	mov	r1, r3
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <main+0xb4>)
 80007f4:	f003 feea 	bl	80045cc <iprintf>
  vIWDG_Init(&hiwdg, IWDG_TIME);
 80007f8:	f241 3188 	movw	r1, #5000	; 0x1388
 80007fc:	4813      	ldr	r0, [pc, #76]	; (800084c <main+0xb8>)
 80007fe:	f000 fb59 	bl	8000eb4 <vIWDG_Init>

  HAL_TIM_Base_Start_IT(&htim14);
 8000802:	4813      	ldr	r0, [pc, #76]	; (8000850 <main+0xbc>)
 8000804:	f002 fbcc 	bl	8002fa0 <HAL_TIM_Base_Start_IT>
  printf("Start Application\r\n");
 8000808:	4812      	ldr	r0, [pc, #72]	; (8000854 <main+0xc0>)
 800080a:	f003 ff53 	bl	80046b4 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    __PRINT_TIME_STAMP();
 800080e:	f000 fea9 	bl	8001564 <HAL_GetTick>
 8000812:	4603      	mov	r3, r0
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fb77 	bl	8000f08 <vTimeStamp>
    TOGGLE_LED(LED_GREEN);
 800081a:	2101      	movs	r1, #1
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <main+0xa8>)
 800081e:	f001 f9d2 	bl	8001bc6 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8000822:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000826:	f000 feb5 	bl	8001594 <HAL_Delay>
    HAL_IWDG_Refresh(&hiwdg);
 800082a:	4808      	ldr	r0, [pc, #32]	; (800084c <main+0xb8>)
 800082c:	f001 fa4f 	bl	8001cce <HAL_IWDG_Refresh>
    __PRINT_TIME_STAMP();
 8000830:	e7ed      	b.n	800080e <main+0x7a>
 8000832:	bf00      	nop
 8000834:	20000098 	.word	0x20000098
 8000838:	20000164 	.word	0x20000164
 800083c:	40020400 	.word	0x40020400
 8000840:	080055e0 	.word	0x080055e0
 8000844:	080055e4 	.word	0x080055e4
 8000848:	08005630 	.word	0x08005630
 800084c:	20000110 	.word	0x20000110
 8000850:	20000124 	.word	0x20000124
 8000854:	08005644 	.word	0x08005644

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b0b8      	sub	sp, #224	; 0xe0
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000862:	2234      	movs	r2, #52	; 0x34
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fea8 	bl	80045bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	2290      	movs	r2, #144	; 0x90
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f003 fe99 	bl	80045bc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800088a:	f001 fa31 	bl	8001cf0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b3b      	ldr	r3, [pc, #236]	; (800097c <SystemClock_Config+0x124>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a3a      	ldr	r2, [pc, #232]	; (800097c <SystemClock_Config+0x124>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b38      	ldr	r3, [pc, #224]	; (800097c <SystemClock_Config+0x124>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a6:	4b36      	ldr	r3, [pc, #216]	; (8000980 <SystemClock_Config+0x128>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a35      	ldr	r2, [pc, #212]	; (8000980 <SystemClock_Config+0x128>)
 80008ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b0:	6013      	str	r3, [r2, #0]
 80008b2:	4b33      	ldr	r3, [pc, #204]	; (8000980 <SystemClock_Config+0x128>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80008be:	2309      	movs	r3, #9
 80008c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d2:	2302      	movs	r3, #2
 80008d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008e0:	2304      	movs	r3, #4
 80008e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008e6:	23d8      	movs	r3, #216	; 0xd8
 80008e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008f2:	2309      	movs	r3, #9
 80008f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 fa57 	bl	8001db0 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000908:	f000 f874 	bl	80009f4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800090c:	f001 fa00 	bl	8001d10 <HAL_PWREx_EnableOverDrive>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000916:	f000 f86d 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800091a:	230f      	movs	r3, #15
 800091c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2302      	movs	r3, #2
 8000922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800092c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000930:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000938:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800093c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000940:	2107      	movs	r1, #7
 8000942:	4618      	mov	r0, r3
 8000944:	f001 fce2 	bl	800230c <HAL_RCC_ClockConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800094e:	f000 f851 	bl	80009f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7 | RCC_PERIPHCLK_CLK48;
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <SystemClock_Config+0x12c>)
 8000954:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000956:	2300      	movs	r3, #0
 8000958:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800095a:	2300      	movs	r3, #0
 800095c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	4618      	mov	r0, r3
 8000966:	f001 fec9 	bl	80026fc <HAL_RCCEx_PeriphCLKConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000970:	f000 f840 	bl	80009f4 <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	37e0      	adds	r7, #224	; 0xe0
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40007000 	.word	0x40007000
 8000984:	00201000 	.word	0x00201000

08000988 <_Error_Handler>:

/* USER CODE BEGIN 4 */
void _Error_Handler(char *file, int line)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
  while (1)
  {
    printf("\r\nError file %s line %d", file, line);
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	4802      	ldr	r0, [pc, #8]	; (80009a0 <_Error_Handler+0x18>)
 8000998:	f003 fe18 	bl	80045cc <iprintf>
 800099c:	e7f9      	b.n	8000992 <_Error_Handler+0xa>
 800099e:	bf00      	nop
 80009a0:	08005658 	.word	0x08005658

080009a4 <HAL_TIM_PeriodElapsedCallback>:
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == CLI_TIMER)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d113      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x3a>
  {
    static uint32_t count;
    count++;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	3301      	adds	r3, #1
 80009bc:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009be:	6013      	str	r3, [r2, #0]
    if (count == 50) /* Every 50ms */
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b32      	cmp	r3, #50	; 0x32
 80009c6:	d10a      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x3a>
    {
      count = 0;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
      if (uart_receive_handle.rx_cplt_flag == 1)
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80009d0:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d102      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x3a>
      {
        vExecuteCLIcmd((USART_StringReceive_t *)&uart_receive_handle);
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80009da:	f000 f8a3 	bl	8000b24 <vExecuteCLIcmd>
      }
    }
  }
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40002000 	.word	0x40002000
 80009ec:	20000100 	.word	0x20000100
 80009f0:	20000098 	.word	0x20000098

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a08:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <__NVIC_SystemReset+0x20>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a14:	4903      	ldr	r1, [pc, #12]	; (8000a24 <__NVIC_SystemReset+0x20>)
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <__NVIC_SystemReset+0x24>)
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	60cb      	str	r3, [r1, #12]
 8000a1c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <__NVIC_SystemReset+0x1c>
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	05fa0004 	.word	0x05fa0004

08000a2c <vUART_CLI_Init>:
/* Should be excluded if not used to prevent build errors */
extern USART_StringReceive_t uart_receive_handle;
extern MCUProcessingEvaluate_t mcu_process_time_handle;

void vUART_CLI_Init(UART_HandleTypeDef *huart, USART_StringReceive_t *uart_receive_handle)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
    huart->Instance = USARTX; /* Select this parameter according to USART Instance configured in .ioc */
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <vUART_CLI_Init+0x68>)
 8000a3a:	601a      	str	r2, [r3, #0]
    huart->Init.BaudRate = 115200;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a42:	605a      	str	r2, [r3, #4]
    huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
    huart->Init.StopBits = UART_STOPBITS_1;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
    huart->Init.Parity = UART_PARITY_NONE;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
    huart->Init.Mode = UART_MODE_TX_RX;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	220c      	movs	r2, #12
 8000a5a:	615a      	str	r2, [r3, #20]
    huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
    huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(huart) != HAL_OK) /* Inside HAL_UART_Init also initialize GPIO used for USART */
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f002 fcc9 	bl	8003400 <HAL_UART_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <vUART_CLI_Init+0x50>
    {
        _Error_Handler(__FILE__, __LINE__);
 8000a74:	2116      	movs	r1, #22
 8000a76:	4808      	ldr	r0, [pc, #32]	; (8000a98 <vUART_CLI_Init+0x6c>)
 8000a78:	f7ff ff86 	bl	8000988 <_Error_Handler>
    }
    /* Enable ISR when receive via USART */
    HAL_UART_Receive_IT(huart, (uint8_t *)(&uart_receive_handle->rx_data), 2);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	3365      	adds	r3, #101	; 0x65
 8000a80:	2202      	movs	r2, #2
 8000a82:	4619      	mov	r1, r3
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f002 fe67 	bl	8003758 <HAL_UART_Receive_IT>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40007800 	.word	0x40007800
 8000a98:	08005670 	.word	0x08005670

08000a9c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    uint8_t i;
    /* Process USART2 Receive_Cplt_IT */
    if (huart->Instance == USARTX)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <HAL_UART_RxCpltCallback+0x7c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d130      	bne.n	8000b10 <HAL_UART_RxCpltCallback+0x74>
    {
        /* Reset Receive Buffer whenever index_value = 0 */
        if (uart_receive_handle.rx_index == 0)
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <HAL_UART_RxCpltCallback+0x80>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10d      	bne.n	8000ad2 <HAL_UART_RxCpltCallback+0x36>
        {
            for (i = 0; i < USART_RX_BUFFER_SIZE; i++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73fb      	strb	r3, [r7, #15]
 8000aba:	e007      	b.n	8000acc <HAL_UART_RxCpltCallback+0x30>
            {
                uart_receive_handle.rx_buffer[i] = 0;
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_UART_RxCpltCallback+0x80>)
 8000ac0:	4413      	add	r3, r2
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	705a      	strb	r2, [r3, #1]
            for (i = 0; i < USART_RX_BUFFER_SIZE; i++)
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	2b63      	cmp	r3, #99	; 0x63
 8000ad0:	d9f4      	bls.n	8000abc <HAL_UART_RxCpltCallback+0x20>
            }
        }

        /* Case when user input data not equal to "\r" */
        if (uart_receive_handle.rx_data[0] != 13)
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_UART_RxCpltCallback+0x80>)
 8000ad4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000ad8:	2b0d      	cmp	r3, #13
 8000ada:	d00d      	beq.n	8000af8 <HAL_UART_RxCpltCallback+0x5c>
        {
            uart_receive_handle.rx_buffer[uart_receive_handle.rx_index++] = uart_receive_handle.rx_data[0];
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_UART_RxCpltCallback+0x80>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	b2d1      	uxtb	r1, r2
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <HAL_UART_RxCpltCallback+0x80>)
 8000ae6:	7011      	strb	r1, [r2, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_UART_RxCpltCallback+0x80>)
 8000aec:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_UART_RxCpltCallback+0x80>)
 8000af2:	440b      	add	r3, r1
 8000af4:	705a      	strb	r2, [r3, #1]
 8000af6:	e006      	b.n	8000b06 <HAL_UART_RxCpltCallback+0x6a>
        }

        else /* Case when user input data = "\r" */
        {
            uart_receive_handle.rx_index = 0;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_UART_RxCpltCallback+0x80>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
            uart_receive_handle.rx_cplt_flag = 1;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <HAL_UART_RxCpltCallback+0x80>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        }

        /* Trigger to Receive and jump into ISR on each ISR process is necessary */
        HAL_UART_Receive_IT(huart, (uint8_t *)(&uart_receive_handle.rx_data), 1);
 8000b06:	2201      	movs	r2, #1
 8000b08:	4905      	ldr	r1, [pc, #20]	; (8000b20 <HAL_UART_RxCpltCallback+0x84>)
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f002 fe24 	bl	8003758 <HAL_UART_Receive_IT>
    }
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40007800 	.word	0x40007800
 8000b1c:	20000098 	.word	0x20000098
 8000b20:	200000fd 	.word	0x200000fd

08000b24 <vExecuteCLIcmd>:

void vExecuteCLIcmd(USART_StringReceive_t *uart_receive_handle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

    char *input_string = (char *)&uart_receive_handle->rx_buffer;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
    /* Clear receive complete flag */
    uart_receive_handle->rx_cplt_flag = 0;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    // PRINTF("Command string: \"%s\"\r\n", uart_receive_handle->rx_buffer);
    if (IS_STRING(input_string, "help"))
 8000b3a:	4972      	ldr	r1, [pc, #456]	; (8000d04 <vExecuteCLIcmd+0x1e0>)
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f7ff fb7f 	bl	8000240 <strcmp>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d11e      	bne.n	8000b86 <vExecuteCLIcmd+0x62>
    {
        printf("/* -------------------------------------------------------------------------- */\r\n");
 8000b48:	486f      	ldr	r0, [pc, #444]	; (8000d08 <vExecuteCLIcmd+0x1e4>)
 8000b4a:	f003 fdb3 	bl	80046b4 <puts>
        printf("/*                               CLI - HELP MENU                              */\r\n");
 8000b4e:	486f      	ldr	r0, [pc, #444]	; (8000d0c <vExecuteCLIcmd+0x1e8>)
 8000b50:	f003 fdb0 	bl	80046b4 <puts>
        printf("/*--------------------------------------------------------------------------- */\r\n");
 8000b54:	486e      	ldr	r0, [pc, #440]	; (8000d10 <vExecuteCLIcmd+0x1ec>)
 8000b56:	f003 fdad 	bl	80046b4 <puts>
        printf("\"help\"                 : Display help menu\r\n");
 8000b5a:	486e      	ldr	r0, [pc, #440]	; (8000d14 <vExecuteCLIcmd+0x1f0>)
 8000b5c:	f003 fdaa 	bl	80046b4 <puts>
        printf("\"<LED_color> <state>\"  : Control equivalent color LED on or off\r\n");
 8000b60:	486d      	ldr	r0, [pc, #436]	; (8000d18 <vExecuteCLIcmd+0x1f4>)
 8000b62:	f003 fda7 	bl	80046b4 <puts>
        printf("\"time\"                 : Get MCU working time\r\n");
 8000b66:	486d      	ldr	r0, [pc, #436]	; (8000d1c <vExecuteCLIcmd+0x1f8>)
 8000b68:	f003 fda4 	bl	80046b4 <puts>
        printf("\"process\"              : Evaluate superloop processing time\r\n");
 8000b6c:	486c      	ldr	r0, [pc, #432]	; (8000d20 <vExecuteCLIcmd+0x1fc>)
 8000b6e:	f003 fda1 	bl	80046b4 <puts>
        printf("\"reboot\"               : Perform chip reset\r\n");
 8000b72:	486c      	ldr	r0, [pc, #432]	; (8000d24 <vExecuteCLIcmd+0x200>)
 8000b74:	f003 fd9e 	bl	80046b4 <puts>
        printf("\"clock\"                : MCU clock\r\n");
 8000b78:	486b      	ldr	r0, [pc, #428]	; (8000d28 <vExecuteCLIcmd+0x204>)
 8000b7a:	f003 fd9b 	bl	80046b4 <puts>
        printf("\r\n\r\n>>> ");
 8000b7e:	486b      	ldr	r0, [pc, #428]	; (8000d2c <vExecuteCLIcmd+0x208>)
 8000b80:	f003 fd24 	bl	80045cc <iprintf>
    {
        printf("Unknown Command: \"%s\"\r\n", input_string);
        printf("\r\n\r\n>>> ");
    }

}
 8000b84:	e0b9      	b.n	8000cfa <vExecuteCLIcmd+0x1d6>
    else if (IS_STRING(input_string, ""))
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d103      	bne.n	8000b96 <vExecuteCLIcmd+0x72>
        printf("\r\n\r\n>>> ");
 8000b8e:	4867      	ldr	r0, [pc, #412]	; (8000d2c <vExecuteCLIcmd+0x208>)
 8000b90:	f003 fd1c 	bl	80045cc <iprintf>
}
 8000b94:	e0b1      	b.n	8000cfa <vExecuteCLIcmd+0x1d6>
    else if (IS_STRING(input_string, "red 1"))
 8000b96:	4966      	ldr	r1, [pc, #408]	; (8000d30 <vExecuteCLIcmd+0x20c>)
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f7ff fb51 	bl	8000240 <strcmp>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d109      	bne.n	8000bb8 <vExecuteCLIcmd+0x94>
        WRITE_LED(LED_RED, ON);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000baa:	4862      	ldr	r0, [pc, #392]	; (8000d34 <vExecuteCLIcmd+0x210>)
 8000bac:	f000 fff2 	bl	8001b94 <HAL_GPIO_WritePin>
        printf("\r\n\r\n>>> ");
 8000bb0:	485e      	ldr	r0, [pc, #376]	; (8000d2c <vExecuteCLIcmd+0x208>)
 8000bb2:	f003 fd0b 	bl	80045cc <iprintf>
}
 8000bb6:	e0a0      	b.n	8000cfa <vExecuteCLIcmd+0x1d6>
    else if (IS_STRING(input_string, "red 0"))
 8000bb8:	495f      	ldr	r1, [pc, #380]	; (8000d38 <vExecuteCLIcmd+0x214>)
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff fb40 	bl	8000240 <strcmp>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d109      	bne.n	8000bda <vExecuteCLIcmd+0xb6>
        WRITE_LED(LED_RED, OFF);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bcc:	4859      	ldr	r0, [pc, #356]	; (8000d34 <vExecuteCLIcmd+0x210>)
 8000bce:	f000 ffe1 	bl	8001b94 <HAL_GPIO_WritePin>
        printf("\r\n\r\n>>> ");
 8000bd2:	4856      	ldr	r0, [pc, #344]	; (8000d2c <vExecuteCLIcmd+0x208>)
 8000bd4:	f003 fcfa 	bl	80045cc <iprintf>
}
 8000bd8:	e08f      	b.n	8000cfa <vExecuteCLIcmd+0x1d6>
    else if (IS_STRING(input_string, "blue 1"))
 8000bda:	4958      	ldr	r1, [pc, #352]	; (8000d3c <vExecuteCLIcmd+0x218>)
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f7ff fb2f 	bl	8000240 <strcmp>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d108      	bne.n	8000bfa <vExecuteCLIcmd+0xd6>
        WRITE_LED(LED_BLUE, ON);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2180      	movs	r1, #128	; 0x80
 8000bec:	4851      	ldr	r0, [pc, #324]	; (8000d34 <vExecuteCLIcmd+0x210>)
 8000bee:	f000 ffd1 	bl	8001b94 <HAL_GPIO_WritePin>
        printf("\r\n\r\n>>> ");
 8000bf2:	484e      	ldr	r0, [pc, #312]	; (8000d2c <vExecuteCLIcmd+0x208>)
 8000bf4:	f003 fcea 	bl	80045cc <iprintf>
}
 8000bf8:	e07f      	b.n	8000cfa <vExecuteCLIcmd+0x1d6>
    else if (IS_STRING(input_string, "blue 0"))
 8000bfa:	4951      	ldr	r1, [pc, #324]	; (8000d40 <vExecuteCLIcmd+0x21c>)
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f7ff fb1f 	bl	8000240 <strcmp>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d108      	bne.n	8000c1a <vExecuteCLIcmd+0xf6>
        WRITE_LED(LED_BLUE, OFF);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	4849      	ldr	r0, [pc, #292]	; (8000d34 <vExecuteCLIcmd+0x210>)
 8000c0e:	f000 ffc1 	bl	8001b94 <HAL_GPIO_WritePin>
        printf("\r\n\r\n>>> ");
 8000c12:	4846      	ldr	r0, [pc, #280]	; (8000d2c <vExecuteCLIcmd+0x208>)
 8000c14:	f003 fcda 	bl	80045cc <iprintf>
}
 8000c18:	e06f      	b.n	8000cfa <vExecuteCLIcmd+0x1d6>
    else if (IS_STRING(input_string, "green 1"))
 8000c1a:	494a      	ldr	r1, [pc, #296]	; (8000d44 <vExecuteCLIcmd+0x220>)
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f7ff fb0f 	bl	8000240 <strcmp>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d108      	bne.n	8000c3a <vExecuteCLIcmd+0x116>
        WRITE_LED(LED_GREEN, ON);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4841      	ldr	r0, [pc, #260]	; (8000d34 <vExecuteCLIcmd+0x210>)
 8000c2e:	f000 ffb1 	bl	8001b94 <HAL_GPIO_WritePin>
        printf("\r\n\r\n>>> ");
 8000c32:	483e      	ldr	r0, [pc, #248]	; (8000d2c <vExecuteCLIcmd+0x208>)
 8000c34:	f003 fcca 	bl	80045cc <iprintf>
}
 8000c38:	e05f      	b.n	8000cfa <vExecuteCLIcmd+0x1d6>
    else if (IS_STRING(input_string, "green 0"))
 8000c3a:	4943      	ldr	r1, [pc, #268]	; (8000d48 <vExecuteCLIcmd+0x224>)
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f7ff faff 	bl	8000240 <strcmp>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d108      	bne.n	8000c5a <vExecuteCLIcmd+0x136>
        WRITE_LED(LED_GREEN, OFF);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4839      	ldr	r0, [pc, #228]	; (8000d34 <vExecuteCLIcmd+0x210>)
 8000c4e:	f000 ffa1 	bl	8001b94 <HAL_GPIO_WritePin>
        printf("\r\n\r\n>>> ");
 8000c52:	4836      	ldr	r0, [pc, #216]	; (8000d2c <vExecuteCLIcmd+0x208>)
 8000c54:	f003 fcba 	bl	80045cc <iprintf>
}
 8000c58:	e04f      	b.n	8000cfa <vExecuteCLIcmd+0x1d6>
    else if (IS_STRING(input_string, "time"))
 8000c5a:	493c      	ldr	r1, [pc, #240]	; (8000d4c <vExecuteCLIcmd+0x228>)
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f7ff faef 	bl	8000240 <strcmp>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10c      	bne.n	8000c82 <vExecuteCLIcmd+0x15e>
        printf("MCU working time: ");
 8000c68:	4839      	ldr	r0, [pc, #228]	; (8000d50 <vExecuteCLIcmd+0x22c>)
 8000c6a:	f003 fcaf 	bl	80045cc <iprintf>
        __PRINT_TIME_STAMP();
 8000c6e:	f000 fc79 	bl	8001564 <HAL_GetTick>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f947 	bl	8000f08 <vTimeStamp>
        printf("\r\n\r\n>>> ");
 8000c7a:	482c      	ldr	r0, [pc, #176]	; (8000d2c <vExecuteCLIcmd+0x208>)
 8000c7c:	f003 fca6 	bl	80045cc <iprintf>
}
 8000c80:	e03b      	b.n	8000cfa <vExecuteCLIcmd+0x1d6>
    else if (IS_STRING(input_string, "process"))
 8000c82:	4934      	ldr	r1, [pc, #208]	; (8000d54 <vExecuteCLIcmd+0x230>)
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f7ff fadb 	bl	8000240 <strcmp>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d106      	bne.n	8000c9e <vExecuteCLIcmd+0x17a>
        vPrintProcessingTime(&mcu_process_time_handle);
 8000c90:	4831      	ldr	r0, [pc, #196]	; (8000d58 <vExecuteCLIcmd+0x234>)
 8000c92:	f000 f9b1 	bl	8000ff8 <vPrintProcessingTime>
        printf("\r\n\r\n>>> ");
 8000c96:	4825      	ldr	r0, [pc, #148]	; (8000d2c <vExecuteCLIcmd+0x208>)
 8000c98:	f003 fc98 	bl	80045cc <iprintf>
}
 8000c9c:	e02d      	b.n	8000cfa <vExecuteCLIcmd+0x1d6>
    else if (IS_STRING(input_string, "clock"))
 8000c9e:	492f      	ldr	r1, [pc, #188]	; (8000d5c <vExecuteCLIcmd+0x238>)
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f7ff facd 	bl	8000240 <strcmp>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d116      	bne.n	8000cda <vExecuteCLIcmd+0x1b6>
        printf("RCC_HCLK Freq: %lu\r\n", HAL_RCC_GetHCLKFreq());
 8000cac:	f001 fcf2 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	482a      	ldr	r0, [pc, #168]	; (8000d60 <vExecuteCLIcmd+0x23c>)
 8000cb6:	f003 fc89 	bl	80045cc <iprintf>
        printf("Tick Freq: %d\r\n", 1000 / HAL_GetTickFreq());
 8000cba:	f000 fc5f 	bl	800157c <HAL_GetTickFreq>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4825      	ldr	r0, [pc, #148]	; (8000d64 <vExecuteCLIcmd+0x240>)
 8000cce:	f003 fc7d 	bl	80045cc <iprintf>
        printf("\r\n\r\n>>> ");
 8000cd2:	4816      	ldr	r0, [pc, #88]	; (8000d2c <vExecuteCLIcmd+0x208>)
 8000cd4:	f003 fc7a 	bl	80045cc <iprintf>
}
 8000cd8:	e00f      	b.n	8000cfa <vExecuteCLIcmd+0x1d6>
    else if (IS_STRING(input_string, "reboot"))
 8000cda:	4923      	ldr	r1, [pc, #140]	; (8000d68 <vExecuteCLIcmd+0x244>)
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f7ff faaf 	bl	8000240 <strcmp>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d101      	bne.n	8000cec <vExecuteCLIcmd+0x1c8>
        NVIC_SystemReset();
 8000ce8:	f7ff fe8c 	bl	8000a04 <__NVIC_SystemReset>
        printf("Unknown Command: \"%s\"\r\n", input_string);
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	481f      	ldr	r0, [pc, #124]	; (8000d6c <vExecuteCLIcmd+0x248>)
 8000cf0:	f003 fc6c 	bl	80045cc <iprintf>
        printf("\r\n\r\n>>> ");
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <vExecuteCLIcmd+0x208>)
 8000cf6:	f003 fc69 	bl	80045cc <iprintf>
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	08005684 	.word	0x08005684
 8000d08:	0800568c 	.word	0x0800568c
 8000d0c:	080056e0 	.word	0x080056e0
 8000d10:	08005734 	.word	0x08005734
 8000d14:	08005788 	.word	0x08005788
 8000d18:	080057b4 	.word	0x080057b4
 8000d1c:	080057f8 	.word	0x080057f8
 8000d20:	08005828 	.word	0x08005828
 8000d24:	08005868 	.word	0x08005868
 8000d28:	08005898 	.word	0x08005898
 8000d2c:	080058bc 	.word	0x080058bc
 8000d30:	080058c8 	.word	0x080058c8
 8000d34:	40020400 	.word	0x40020400
 8000d38:	080058d0 	.word	0x080058d0
 8000d3c:	080058d8 	.word	0x080058d8
 8000d40:	080058e0 	.word	0x080058e0
 8000d44:	080058e8 	.word	0x080058e8
 8000d48:	080058f0 	.word	0x080058f0
 8000d4c:	080058f8 	.word	0x080058f8
 8000d50:	08005900 	.word	0x08005900
 8000d54:	08005914 	.word	0x08005914
 8000d58:	2000008c 	.word	0x2000008c
 8000d5c:	0800591c 	.word	0x0800591c
 8000d60:	08005924 	.word	0x08005924
 8000d64:	0800593c 	.word	0x0800593c
 8000d68:	0800594c 	.word	0x0800594c
 8000d6c:	08005954 	.word	0x08005954

08000d70 <resetCauseGet>:
	}
}
#endif /* !configLL_UART */

reset_cause_t resetCauseGet(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
		RCC_FLAG_WWDGRST: Window watchdog reset flag
		RCC_FLAG_LPWRRST: Low power reset flag 
	*/
	reset_cause_t reset_cause;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <resetCauseGet+0xa0>)
 8000d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	da02      	bge.n	8000d84 <resetCauseGet+0x14>
	{
		reset_cause = eRESET_CAUSE_LOW_POWER_RESET;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	71fb      	strb	r3, [r7, #7]
 8000d82:	e037      	b.n	8000df4 <resetCauseGet+0x84>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <resetCauseGet+0xa0>)
 8000d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d002      	beq.n	8000d96 <resetCauseGet+0x26>
	{
		reset_cause = eRESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8000d90:	2302      	movs	r3, #2
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	e02e      	b.n	8000df4 <resetCauseGet+0x84>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8000d96:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <resetCauseGet+0xa0>)
 8000d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <resetCauseGet+0x38>
	{
		reset_cause = eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8000da2:	2303      	movs	r3, #3
 8000da4:	71fb      	strb	r3, [r7, #7]
 8000da6:	e025      	b.n	8000df4 <resetCauseGet+0x84>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <resetCauseGet+0xa0>)
 8000daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <resetCauseGet+0x4a>
	{
		reset_cause = eRESET_CAUSE_SOFTWARE_RESET; // This reset is induced by calling the ARM CMSIS `NVIC_SystemReset()` function!
 8000db4:	2304      	movs	r3, #4
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	e01c      	b.n	8000df4 <resetCauseGet+0x84>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <resetCauseGet+0xa0>)
 8000dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <resetCauseGet+0x5c>
	{
		reset_cause = eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	71fb      	strb	r3, [r7, #7]
 8000dca:	e013      	b.n	8000df4 <resetCauseGet+0x84>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8000dcc:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <resetCauseGet+0xa0>)
 8000dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d002      	beq.n	8000dde <resetCauseGet+0x6e>
	{
		reset_cause = eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8000dd8:	2306      	movs	r3, #6
 8000dda:	71fb      	strb	r3, [r7, #7]
 8000ddc:	e00a      	b.n	8000df4 <resetCauseGet+0x84>
	}
#ifndef STM32_F1
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <resetCauseGet+0xa0>)
 8000de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <resetCauseGet+0x80>
	{
		reset_cause = eRESET_CAUSE_BROWNOUT_RESET;
 8000dea:	2307      	movs	r3, #7
 8000dec:	71fb      	strb	r3, [r7, #7]
 8000dee:	e001      	b.n	8000df4 <resetCauseGet+0x84>
	}
#endif /* !STM32_F1 */
	else
	{
		reset_cause = eRESET_CAUSE_UNKNOWN;
 8000df0:	2300      	movs	r3, #0
 8000df2:	71fb      	strb	r3, [r7, #7]
	}

	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <resetCauseGet+0xa0>)
 8000df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000df8:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <resetCauseGet+0xa0>)
 8000dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dfe:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_cause;
 8000e00:	79fb      	ldrb	r3, [r7, #7]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <resetCauseGetName>:

const char *resetCauseGetName(reset_cause_t reset_cause)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
	const char *reset_cause_name = "TBD";
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <resetCauseGetName+0x7c>)
 8000e20:	60fb      	str	r3, [r7, #12]

	switch (reset_cause)
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b07      	cmp	r3, #7
 8000e26:	d82b      	bhi.n	8000e80 <resetCauseGetName+0x6c>
 8000e28:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <resetCauseGetName+0x1c>)
 8000e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2e:	bf00      	nop
 8000e30:	08000e51 	.word	0x08000e51
 8000e34:	08000e57 	.word	0x08000e57
 8000e38:	08000e5d 	.word	0x08000e5d
 8000e3c:	08000e63 	.word	0x08000e63
 8000e40:	08000e69 	.word	0x08000e69
 8000e44:	08000e6f 	.word	0x08000e6f
 8000e48:	08000e75 	.word	0x08000e75
 8000e4c:	08000e7b 	.word	0x08000e7b
	{
	case eRESET_CAUSE_UNKNOWN:
		reset_cause_name = "UNKNOWN";
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <resetCauseGetName+0x80>)
 8000e52:	60fb      	str	r3, [r7, #12]
		break;
 8000e54:	e014      	b.n	8000e80 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_LOW_POWER_RESET:
		reset_cause_name = "LOW_POWER_RESET";
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <resetCauseGetName+0x84>)
 8000e58:	60fb      	str	r3, [r7, #12]
		break;
 8000e5a:	e011      	b.n	8000e80 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_WINDOW_WATCHDOG_RESET:
		reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <resetCauseGetName+0x88>)
 8000e5e:	60fb      	str	r3, [r7, #12]
		break;
 8000e60:	e00e      	b.n	8000e80 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
		reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <resetCauseGetName+0x8c>)
 8000e64:	60fb      	str	r3, [r7, #12]
		break;
 8000e66:	e00b      	b.n	8000e80 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_SOFTWARE_RESET:
		reset_cause_name = "SOFTWARE_RESET";
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <resetCauseGetName+0x90>)
 8000e6a:	60fb      	str	r3, [r7, #12]
		break;
 8000e6c:	e008      	b.n	8000e80 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
		reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <resetCauseGetName+0x94>)
 8000e70:	60fb      	str	r3, [r7, #12]
		break;
 8000e72:	e005      	b.n	8000e80 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
		reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <resetCauseGetName+0x98>)
 8000e76:	60fb      	str	r3, [r7, #12]
		break;
 8000e78:	e002      	b.n	8000e80 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_BROWNOUT_RESET:
		reset_cause_name = "BROWNOUT_RESET (BOR)";
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <resetCauseGetName+0x9c>)
 8000e7c:	60fb      	str	r3, [r7, #12]
		break;
 8000e7e:	bf00      	nop
	}
	return reset_cause_name;
 8000e80:	68fb      	ldr	r3, [r7, #12]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	0800596c 	.word	0x0800596c
 8000e94:	08005970 	.word	0x08005970
 8000e98:	08005978 	.word	0x08005978
 8000e9c:	08005988 	.word	0x08005988
 8000ea0:	080059a0 	.word	0x080059a0
 8000ea4:	080059bc 	.word	0x080059bc
 8000ea8:	080059cc 	.word	0x080059cc
 8000eac:	080059fc 	.word	0x080059fc
 8000eb0:	08005a18 	.word	0x08005a18

08000eb4 <vIWDG_Init>:

void vIWDG_Init(IWDG_HandleTypeDef *hiwdg, uint32_t millis)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]

	/* Select INDEPENDENT_WATCHDOG */
	hiwdg->Instance = IWDG;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <vIWDG_Init+0x48>)
 8000ec2:	601a      	str	r2, [r3, #0]
	/* Use prescaler LSI/128 */
	hiwdg->Init.Prescaler = IWDG_PRESCALER_32;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	605a      	str	r2, [r3, #4]
	hiwdg->Init.Reload = millis;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	609a      	str	r2, [r3, #8]
#ifndef STM32_F1
	hiwdg->Init.Window = millis;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	60da      	str	r2, [r3, #12]
#endif /* !STM32_F1 */
	if (HAL_IWDG_Init(hiwdg) != HAL_OK)
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 feb3 	bl	8001c42 <HAL_IWDG_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <vIWDG_Init+0x36>
	{
		_Error_Handler(__FILE__, __LINE__);
 8000ee2:	2185      	movs	r1, #133	; 0x85
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <vIWDG_Init+0x4c>)
 8000ee6:	f7ff fd4f 	bl	8000988 <_Error_Handler>
	}

#ifdef PRINT_DEBUG
	printf("Set IWDG %ums\r\n", IWDG_TIME);
 8000eea:	f241 3188 	movw	r1, #5000	; 0x1388
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <vIWDG_Init+0x50>)
 8000ef0:	f003 fb6c 	bl	80045cc <iprintf>
#endif
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40003000 	.word	0x40003000
 8000f00:	08005a30 	.word	0x08005a30
 8000f04:	08005a48 	.word	0x08005a48

08000f08 <vTimeStamp>:
		printf("\r\nError file %s line %d", file, line);
	}
}

void vTimeStamp(uint32_t now_tick)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	6078      	str	r0, [r7, #4]

	// HAL_TICK_FREQ_10HZ = 100U,
	// HAL_TICK_FREQ_100HZ = 10U,
	// HAL_TICK_FREQ_1KHZ = 1U,
	// HAL_TICK_FREQ_DEFAULT = HAL_TICK_FREQ_1KHZ
	hal_tick_freq = HAL_GetTickFreq();
 8000f10:	f000 fb34 	bl	800157c <HAL_GetTickFreq>
 8000f14:	4603      	mov	r3, r0
 8000f16:	613b      	str	r3, [r7, #16]
	if (hal_tick_freq == HAL_TICK_FREQ_1KHZ)
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d103      	bne.n	8000f26 <vTimeStamp+0x1e>
	{
		divider = 1000;
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e005      	b.n	8000f32 <vTimeStamp+0x2a>
	}
	else if (hal_tick_freq == HAL_TICK_FREQ_100HZ)
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	2b0a      	cmp	r3, #10
 8000f2a:	d102      	bne.n	8000f32 <vTimeStamp+0x2a>
	{
		divider = 10000;
 8000f2c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f30:	617b      	str	r3, [r7, #20]
	}
	if (hal_tick_freq == HAL_TICK_FREQ_10HZ)
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	2b64      	cmp	r3, #100	; 0x64
 8000f36:	d101      	bne.n	8000f3c <vTimeStamp+0x34>
	{
		divider = 100000;
 8000f38:	4b2a      	ldr	r3, [pc, #168]	; (8000fe4 <vTimeStamp+0xdc>)
 8000f3a:	617b      	str	r3, [r7, #20]
	}
	/* ex: 450235ms => now_second = 450 */
	now_second = now_tick / divider;
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f44:	60fb      	str	r3, [r7, #12]
	/* ex: 450235ms => millis_second = 235 */
	millis_second = now_tick - now_second * divider;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	fb02 f303 	mul.w	r3, r2, r3
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	61bb      	str	r3, [r7, #24]
	if (millis_second > 10000)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d906      	bls.n	8000f6c <vTimeStamp+0x64>
	{
		millis_second /= 100;
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <vTimeStamp+0xe0>)
 8000f62:	fba2 2303 	umull	r2, r3, r2, r3
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	e009      	b.n	8000f80 <vTimeStamp+0x78>
	}
	else if (millis_second > 1000)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f72:	d905      	bls.n	8000f80 <vTimeStamp+0x78>
	{
		millis_second /= 10;
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <vTimeStamp+0xe4>)
 8000f78:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7c:	08db      	lsrs	r3, r3, #3
 8000f7e:	61bb      	str	r3, [r7, #24]
	}
	/* ex: 450235ms => 450/60 = 7 */
	minute = now_second / 60;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <vTimeStamp+0xe8>)
 8000f84:	fba2 2303 	umull	r2, r3, r2, r3
 8000f88:	095b      	lsrs	r3, r3, #5
 8000f8a:	77fb      	strb	r3, [r7, #31]
	/* ex: 450235ms => 450 - 7*60 = 30 */
	second = now_second - minute * 60;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	7ffb      	ldrb	r3, [r7, #31]
 8000f92:	4619      	mov	r1, r3
 8000f94:	0109      	lsls	r1, r1, #4
 8000f96:	1acb      	subs	r3, r1, r3
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	72fb      	strb	r3, [r7, #11]
	if (minute > 60)
 8000fa0:	7ffb      	ldrb	r3, [r7, #31]
 8000fa2:	2b3c      	cmp	r3, #60	; 0x3c
 8000fa4:	d90f      	bls.n	8000fc6 <vTimeStamp+0xbe>
	{
		hour = minute / 60;
 8000fa6:	7ffb      	ldrb	r3, [r7, #31]
 8000fa8:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <vTimeStamp+0xe8>)
 8000faa:	fba2 2303 	umull	r2, r3, r2, r3
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	77bb      	strb	r3, [r7, #30]
		minute = minute - hour * 60;
 8000fb2:	7fbb      	ldrb	r3, [r7, #30]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	7ffb      	ldrb	r3, [r7, #31]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	77fb      	strb	r3, [r7, #31]
 8000fc4:	e001      	b.n	8000fca <vTimeStamp+0xc2>
	}
	else
	{
		hour = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	77bb      	strb	r3, [r7, #30]
	}

#if (defined(PRINT_DEBUG))
	printf("[%02d:%02d:%02d.%03lu]\r\n", hour, minute, second, millis_second);
 8000fca:	7fb9      	ldrb	r1, [r7, #30]
 8000fcc:	7ffa      	ldrb	r2, [r7, #31]
 8000fce:	7af8      	ldrb	r0, [r7, #11]
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <vTimeStamp+0xec>)
 8000fd8:	f003 faf8 	bl	80045cc <iprintf>
#endif
	return;
 8000fdc:	bf00      	nop
}
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	000186a0 	.word	0x000186a0
 8000fe8:	51eb851f 	.word	0x51eb851f
 8000fec:	cccccccd 	.word	0xcccccccd
 8000ff0:	88888889 	.word	0x88888889
 8000ff4:	08005a70 	.word	0x08005a70

08000ff8 <vPrintProcessingTime>:
	}
	return;
}

void vPrintProcessingTime(MCUProcessingEvaluate_t *mcu_process_time_handle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	newline;
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <vPrintProcessingTime+0x3c>)
 8001002:	f003 fb57 	bl	80046b4 <puts>
	printf("Current processing time: %ldms\r\n", mcu_process_time_handle->current_process_time);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	4619      	mov	r1, r3
 800100c:	480a      	ldr	r0, [pc, #40]	; (8001038 <vPrintProcessingTime+0x40>)
 800100e:	f003 fadd 	bl	80045cc <iprintf>
	printf("Max processing time: %ldms\r\n", mcu_process_time_handle->max_process_time);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4619      	mov	r1, r3
 8001018:	4808      	ldr	r0, [pc, #32]	; (800103c <vPrintProcessingTime+0x44>)
 800101a:	f003 fad7 	bl	80045cc <iprintf>
	printf("Min processing time: %ldms\r\n", mcu_process_time_handle->min_process_time);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4619      	mov	r1, r3
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <vPrintProcessingTime+0x48>)
 8001026:	f003 fad1 	bl	80045cc <iprintf>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	08005a8c 	.word	0x08005a8c
 8001038:	08005a90 	.word	0x08005a90
 800103c:	08005ab4 	.word	0x08005ab4
 8001040:	08005ad4 	.word	0x08005ad4

08001044 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <RetargetInit+0x28>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <RetargetInit+0x2c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6898      	ldr	r0, [r3, #8]
 8001058:	2300      	movs	r3, #0
 800105a:	2202      	movs	r2, #2
 800105c:	2100      	movs	r1, #0
 800105e:	f003 fb31 	bl	80046c4 <setvbuf>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000120 	.word	0x20000120
 8001070:	2000000c 	.word	0x2000000c

08001074 <_isatty>:

int _isatty(int fd) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db04      	blt.n	800108c <_isatty+0x18>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b02      	cmp	r3, #2
 8001086:	dc01      	bgt.n	800108c <_isatty+0x18>
    return 1;
 8001088:	2301      	movs	r3, #1
 800108a:	e005      	b.n	8001098 <_isatty+0x24>

  errno = EBADF;
 800108c:	f003 fa6c 	bl	8004568 <__errno>
 8001090:	4602      	mov	r2, r0
 8001092:	2309      	movs	r3, #9
 8001094:	6013      	str	r3, [r2, #0]
  return 0;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_write>:

int _write(int fd, char* ptr, int len) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d002      	beq.n	80010b8 <_write+0x18>
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d111      	bne.n	80010dc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <_write+0x54>)
 80010ba:	6818      	ldr	r0, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	f002 f9e9 	bl	800349c <HAL_UART_Transmit>
 80010ca:	4603      	mov	r3, r0
 80010cc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <_write+0x38>
      return len;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	e008      	b.n	80010ea <_write+0x4a>
    else
      return EIO;
 80010d8:	2305      	movs	r3, #5
 80010da:	e006      	b.n	80010ea <_write+0x4a>
  }
  errno = EBADF;
 80010dc:	f003 fa44 	bl	8004568 <__errno>
 80010e0:	4602      	mov	r2, r0
 80010e2:	2309      	movs	r3, #9
 80010e4:	6013      	str	r3, [r2, #0]
  return -1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000120 	.word	0x20000120

080010f8 <_close>:

int _close(int fd) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db04      	blt.n	8001110 <_close+0x18>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b02      	cmp	r3, #2
 800110a:	dc01      	bgt.n	8001110 <_close+0x18>
    return 0;
 800110c:	2300      	movs	r3, #0
 800110e:	e006      	b.n	800111e <_close+0x26>

  errno = EBADF;
 8001110:	f003 fa2a 	bl	8004568 <__errno>
 8001114:	4602      	mov	r2, r0
 8001116:	2309      	movs	r3, #9
 8001118:	6013      	str	r3, [r2, #0]
  return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001132:	f003 fa19 	bl	8004568 <__errno>
 8001136:	4602      	mov	r2, r0
 8001138:	2309      	movs	r3, #9
 800113a:	6013      	str	r3, [r2, #0]
  return -1;
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <_read>:

int _read(int fd, char* ptr, int len) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d110      	bne.n	800117c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <_read+0x4c>)
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	2201      	movs	r2, #1
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	f002 fa2a 	bl	80035be <HAL_UART_Receive>
 800116a:	4603      	mov	r3, r0
 800116c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800116e:	7dfb      	ldrb	r3, [r7, #23]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <_read+0x30>
      return 1;
 8001174:	2301      	movs	r3, #1
 8001176:	e008      	b.n	800118a <_read+0x42>
    else
      return EIO;
 8001178:	2305      	movs	r3, #5
 800117a:	e006      	b.n	800118a <_read+0x42>
  }
  errno = EBADF;
 800117c:	f003 f9f4 	bl	8004568 <__errno>
 8001180:	4602      	mov	r2, r0
 8001182:	2309      	movs	r3, #9
 8001184:	6013      	str	r3, [r2, #0]
  return -1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000120 	.word	0x20000120

08001198 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db08      	blt.n	80011ba <_fstat+0x22>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	dc05      	bgt.n	80011ba <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b4:	605a      	str	r2, [r3, #4]
    return 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e005      	b.n	80011c6 <_fstat+0x2e>
  }

  errno = EBADF;
 80011ba:	f003 f9d5 	bl	8004568 <__errno>
 80011be:	4602      	mov	r2, r0
 80011c0:	2309      	movs	r3, #9
 80011c2:	6013      	str	r3, [r2, #0]
  return 0;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_MspInit+0x44>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_MspInit+0x44>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_MspInit+0x44>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_MspInit+0x44>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_MspInit+0x44>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_MspInit+0x44>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 f966 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001278:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800127c:	f000 fcbe 	bl	8001bfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800128a:	f001 feb3 	bl	8002ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000124 	.word	0x20000124

08001298 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <UART7_IRQHandler+0x10>)
 800129e:	f002 fafd 	bl	800389c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000164 	.word	0x20000164

080012ac <_sbrk>:
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
 80012dc:	f003 f944 	bl	8004568 <__errno>
 80012e0:	4602      	mov	r2, r0
 80012e2:	230c      	movs	r3, #12
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20080000 	.word	0x20080000
 800130c:	00000400 	.word	0x00000400
 8001310:	20000104 	.word	0x20000104
 8001314:	200001f0 	.word	0x200001f0

08001318 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <SystemInit+0x28>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a07      	ldr	r2, [pc, #28]	; (8001340 <SystemInit+0x28>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SystemInit+0x28>)
 800132e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001332:	609a      	str	r2, [r3, #8]
#endif
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_TIM14_Init+0x40>)
 800134a:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <MX_TIM14_Init+0x44>)
 800134c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 216-1;
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <MX_TIM14_Init+0x40>)
 8001350:	22d7      	movs	r2, #215	; 0xd7
 8001352:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_TIM14_Init+0x40>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <MX_TIM14_Init+0x40>)
 800135c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001360:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_TIM14_Init+0x40>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_TIM14_Init+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_TIM14_Init+0x40>)
 8001370:	f001 fdea 	bl	8002f48 <HAL_TIM_Base_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800137a:	f7ff fb3b 	bl	80009f4 <Error_Handler>
  }

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000124 	.word	0x20000124
 8001388:	40002000 	.word	0x40002000

0800138c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <HAL_TIM_Base_MspInit+0x44>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d113      	bne.n	80013c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <HAL_TIM_Base_MspInit+0x48>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <HAL_TIM_Base_MspInit+0x48>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_TIM_Base_MspInit+0x48>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	202d      	movs	r0, #45	; 0x2d
 80013bc:	f000 f9e7 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80013c0:	202d      	movs	r0, #45	; 0x2d
 80013c2:	f000 fa00 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40002000 	.word	0x40002000
 80013d4:	40023800 	.word	0x40023800

080013d8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <HAL_UART_MspInit+0x8c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d130      	bne.n	800145c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_UART_MspInit+0x90>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a1a      	ldr	r2, [pc, #104]	; (8001468 <HAL_UART_MspInit+0x90>)
 8001400:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_UART_MspInit+0x90>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_UART_MspInit+0x90>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a14      	ldr	r2, [pc, #80]	; (8001468 <HAL_UART_MspInit+0x90>)
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_UART_MspInit+0x90>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800142a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800142e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800143c:	2308      	movs	r3, #8
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	4809      	ldr	r0, [pc, #36]	; (800146c <HAL_UART_MspInit+0x94>)
 8001448:	f000 f9fa 	bl	8001840 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	2052      	movs	r0, #82	; 0x52
 8001452:	f000 f99c 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001456:	2052      	movs	r0, #82	; 0x52
 8001458:	f000 f9b5 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40007800 	.word	0x40007800
 8001468:	40023800 	.word	0x40023800
 800146c:	40021000 	.word	0x40021000

08001470 <Reset_Handler>:
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a8 <LoopFillZerobss+0x14>
 8001474:	2100      	movs	r1, #0
 8001476:	e003      	b.n	8001480 <LoopCopyDataInit>

08001478 <CopyDataInit>:
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <LoopFillZerobss+0x18>)
 800147a:	585b      	ldr	r3, [r3, r1]
 800147c:	5043      	str	r3, [r0, r1]
 800147e:	3104      	adds	r1, #4

08001480 <LoopCopyDataInit>:
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <LoopFillZerobss+0x1c>)
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <LoopFillZerobss+0x20>)
 8001484:	1842      	adds	r2, r0, r1
 8001486:	429a      	cmp	r2, r3
 8001488:	d3f6      	bcc.n	8001478 <CopyDataInit>
 800148a:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <LoopFillZerobss+0x24>)
 800148c:	e002      	b.n	8001494 <LoopFillZerobss>

0800148e <FillZerobss>:
 800148e:	2300      	movs	r3, #0
 8001490:	f842 3b04 	str.w	r3, [r2], #4

08001494 <LoopFillZerobss>:
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <LoopFillZerobss+0x28>)
 8001496:	429a      	cmp	r2, r3
 8001498:	d3f9      	bcc.n	800148e <FillZerobss>
 800149a:	f7ff ff3d 	bl	8001318 <SystemInit>
 800149e:	f003 f869 	bl	8004574 <__libc_init_array>
 80014a2:	f7ff f977 	bl	8000794 <main>
 80014a6:	4770      	bx	lr
 80014a8:	20080000 	.word	0x20080000
 80014ac:	08005bb4 	.word	0x08005bb4
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000070 	.word	0x20000070
 80014b8:	20000070 	.word	0x20000070
 80014bc:	200001ec 	.word	0x200001ec

080014c0 <ADC_IRQHandler>:
 80014c0:	e7fe      	b.n	80014c0 <ADC_IRQHandler>

080014c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c6:	2003      	movs	r0, #3
 80014c8:	f000 f956 	bl	8001778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f000 f805 	bl	80014dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80014d2:	f7ff fe7d 	bl	80011d0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_InitTick+0x54>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_InitTick+0x58>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f971 	bl	80017e2 <HAL_SYSTICK_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00e      	b.n	8001528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d80a      	bhi.n	8001526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f000 f939 	bl	800178e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4a06      	ldr	r2, [pc, #24]	; (8001538 <HAL_InitTick+0x5c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000000 	.word	0x20000000
 8001534:	20000008 	.word	0x20000008
 8001538:	20000004 	.word	0x20000004

0800153c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008
 8001560:	200001e4 	.word	0x200001e4

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200001e4 	.word	0x200001e4

0800157c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_GetTickFreq+0x14>)
 8001582:	781b      	ldrb	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000008 	.word	0x20000008

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ffe2 	bl	8001564 <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_Delay+0x40>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffd2 	bl	8001564 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000008 	.word	0x20000008

080015d8 <__NVIC_SetPriorityGrouping>:
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <__NVIC_SetPriorityGrouping+0x40>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f4:	4013      	ands	r3, r2
 80015f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	4313      	orrs	r3, r2
 8001604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001606:	4a04      	ldr	r2, [pc, #16]	; (8001618 <__NVIC_SetPriorityGrouping+0x40>)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	60d3      	str	r3, [r2, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00
 800161c:	05fa0000 	.word	0x05fa0000

08001620 <__NVIC_GetPriorityGrouping>:
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <__NVIC_GetPriorityGrouping+0x18>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	f003 0307 	and.w	r3, r3, #7
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_EnableIRQ>:
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	2b00      	cmp	r3, #0
 800164c:	db0b      	blt.n	8001666 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	f003 021f 	and.w	r2, r3, #31
 8001654:	4907      	ldr	r1, [pc, #28]	; (8001674 <__NVIC_EnableIRQ+0x38>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	2001      	movs	r0, #1
 800165e:	fa00 f202 	lsl.w	r2, r0, r2
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	; (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001744:	d301      	bcc.n	800174a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001746:	2301      	movs	r3, #1
 8001748:	e00f      	b.n	800176a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <SysTick_Config+0x40>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001752:	210f      	movs	r1, #15
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f7ff ff8e 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <SysTick_Config+0x40>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <SysTick_Config+0x40>)
 8001764:	2207      	movs	r2, #7
 8001766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	e000e010 	.word	0xe000e010

08001778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff29 	bl	80015d8 <__NVIC_SetPriorityGrouping>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a0:	f7ff ff3e 	bl	8001620 <__NVIC_GetPriorityGrouping>
 80017a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff ff8e 	bl	80016cc <NVIC_EncodePriority>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff5d 	bl	8001678 <__NVIC_SetPriority>
}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff31 	bl	800163c <__NVIC_EnableIRQ>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffa2 	bl	8001734 <SysTick_Config>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d004      	beq.n	8001818 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2280      	movs	r2, #128	; 0x80
 8001812:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e00c      	b.n	8001832 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2205      	movs	r2, #5
 800181c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e175      	b.n	8001b4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8164 	bne.w	8001b46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d00b      	beq.n	800189e <HAL_GPIO_Init+0x5e>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d007      	beq.n	800189e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001892:	2b11      	cmp	r3, #17
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b12      	cmp	r3, #18
 800189c:	d130      	bne.n	8001900 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d4:	2201      	movs	r2, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 0201 	and.w	r2, r3, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2203      	movs	r2, #3
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x100>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b12      	cmp	r3, #18
 800193e:	d123      	bne.n	8001988 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0203 	and.w	r2, r3, #3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80be 	beq.w	8001b46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <HAL_GPIO_Init+0x320>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a64      	ldr	r2, [pc, #400]	; (8001b60 <HAL_GPIO_Init+0x320>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b62      	ldr	r3, [pc, #392]	; (8001b60 <HAL_GPIO_Init+0x320>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019e2:	4a60      	ldr	r2, [pc, #384]	; (8001b64 <HAL_GPIO_Init+0x324>)
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	220f      	movs	r2, #15
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a57      	ldr	r2, [pc, #348]	; (8001b68 <HAL_GPIO_Init+0x328>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d037      	beq.n	8001a7e <HAL_GPIO_Init+0x23e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a56      	ldr	r2, [pc, #344]	; (8001b6c <HAL_GPIO_Init+0x32c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d031      	beq.n	8001a7a <HAL_GPIO_Init+0x23a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a55      	ldr	r2, [pc, #340]	; (8001b70 <HAL_GPIO_Init+0x330>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d02b      	beq.n	8001a76 <HAL_GPIO_Init+0x236>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a54      	ldr	r2, [pc, #336]	; (8001b74 <HAL_GPIO_Init+0x334>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d025      	beq.n	8001a72 <HAL_GPIO_Init+0x232>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a53      	ldr	r2, [pc, #332]	; (8001b78 <HAL_GPIO_Init+0x338>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d01f      	beq.n	8001a6e <HAL_GPIO_Init+0x22e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_GPIO_Init+0x33c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d019      	beq.n	8001a6a <HAL_GPIO_Init+0x22a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a51      	ldr	r2, [pc, #324]	; (8001b80 <HAL_GPIO_Init+0x340>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_GPIO_Init+0x226>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a50      	ldr	r2, [pc, #320]	; (8001b84 <HAL_GPIO_Init+0x344>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00d      	beq.n	8001a62 <HAL_GPIO_Init+0x222>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4f      	ldr	r2, [pc, #316]	; (8001b88 <HAL_GPIO_Init+0x348>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d007      	beq.n	8001a5e <HAL_GPIO_Init+0x21e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4e      	ldr	r2, [pc, #312]	; (8001b8c <HAL_GPIO_Init+0x34c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d101      	bne.n	8001a5a <HAL_GPIO_Init+0x21a>
 8001a56:	2309      	movs	r3, #9
 8001a58:	e012      	b.n	8001a80 <HAL_GPIO_Init+0x240>
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	e010      	b.n	8001a80 <HAL_GPIO_Init+0x240>
 8001a5e:	2308      	movs	r3, #8
 8001a60:	e00e      	b.n	8001a80 <HAL_GPIO_Init+0x240>
 8001a62:	2307      	movs	r3, #7
 8001a64:	e00c      	b.n	8001a80 <HAL_GPIO_Init+0x240>
 8001a66:	2306      	movs	r3, #6
 8001a68:	e00a      	b.n	8001a80 <HAL_GPIO_Init+0x240>
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	e008      	b.n	8001a80 <HAL_GPIO_Init+0x240>
 8001a6e:	2304      	movs	r3, #4
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x240>
 8001a72:	2303      	movs	r3, #3
 8001a74:	e004      	b.n	8001a80 <HAL_GPIO_Init+0x240>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_Init+0x240>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_GPIO_Init+0x240>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	f002 0203 	and.w	r2, r2, #3
 8001a86:	0092      	lsls	r2, r2, #2
 8001a88:	4093      	lsls	r3, r2
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a90:	4934      	ldr	r1, [pc, #208]	; (8001b64 <HAL_GPIO_Init+0x324>)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	3302      	adds	r3, #2
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9e:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <HAL_GPIO_Init+0x350>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac2:	4a33      	ldr	r2, [pc, #204]	; (8001b90 <HAL_GPIO_Init+0x350>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ac8:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <HAL_GPIO_Init+0x350>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aec:	4a28      	ldr	r2, [pc, #160]	; (8001b90 <HAL_GPIO_Init+0x350>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af2:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_GPIO_Init+0x350>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b16:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <HAL_GPIO_Init+0x350>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <HAL_GPIO_Init+0x350>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b40:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <HAL_GPIO_Init+0x350>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b0f      	cmp	r3, #15
 8001b50:	f67f ae86 	bls.w	8001860 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b54:	bf00      	nop
 8001b56:	3724      	adds	r7, #36	; 0x24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40020c00 	.word	0x40020c00
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40021400 	.word	0x40021400
 8001b80:	40021800 	.word	0x40021800
 8001b84:	40021c00 	.word	0x40021c00
 8001b88:	40022000 	.word	0x40022000
 8001b8c:	40022400 	.word	0x40022400
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bb0:	e003      	b.n	8001bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d004      	beq.n	8001be8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001be6:	e002      	b.n	8001bee <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001be8:	887a      	ldrh	r2, [r7, #2]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	619a      	str	r2, [r3, #24]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c08:	695a      	ldr	r2, [r3, #20]
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d006      	beq.n	8001c20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f806 	bl	8001c2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40013c00 	.word	0x40013c00

08001c2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e038      	b.n	8001cc6 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001c5c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f245 5255 	movw	r2, #21845	; 0x5555
 8001c66:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6852      	ldr	r2, [r2, #4]
 8001c70:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6892      	ldr	r2, [r2, #8]
 8001c7a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001c7c:	f7ff fc72 	bl	8001564 <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001c82:	e008      	b.n	8001c96 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001c84:	f7ff fc6e 	bl	8001564 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b30      	cmp	r3, #48	; 0x30
 8001c90:	d901      	bls.n	8001c96 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e017      	b.n	8001cc6 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f1      	bne.n	8001c84 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d005      	beq.n	8001cba <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68d2      	ldr	r2, [r2, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
 8001cb8:	e004      	b.n	8001cc4 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001cde:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40007000 	.word	0x40007000

08001d10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a22      	ldr	r2, [pc, #136]	; (8001da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d3e:	f7ff fc11 	bl	8001564 <HAL_GetTick>
 8001d42:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d44:	e009      	b.n	8001d5a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d46:	f7ff fc0d 	bl	8001564 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d54:	d901      	bls.n	8001d5a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e022      	b.n	8001da0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d66:	d1ee      	bne.n	8001d46 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d74:	f7ff fbf6 	bl	8001564 <HAL_GetTick>
 8001d78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d7a:	e009      	b.n	8001d90 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d7c:	f7ff fbf2 	bl	8001564 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d8a:	d901      	bls.n	8001d90 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e007      	b.n	8001da0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d9c:	d1ee      	bne.n	8001d7c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40007000 	.word	0x40007000

08001db0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e29b      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8087 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd4:	4b96      	ldr	r3, [pc, #600]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d00c      	beq.n	8001dfa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de0:	4b93      	ldr	r3, [pc, #588]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d112      	bne.n	8001e12 <HAL_RCC_OscConfig+0x62>
 8001dec:	4b90      	ldr	r3, [pc, #576]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001df8:	d10b      	bne.n	8001e12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfa:	4b8d      	ldr	r3, [pc, #564]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d06c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x130>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d168      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e275      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x7a>
 8001e1c:	4b84      	ldr	r3, [pc, #528]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a83      	ldr	r2, [pc, #524]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e02e      	b.n	8001e88 <HAL_RCC_OscConfig+0xd8>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x9c>
 8001e32:	4b7f      	ldr	r3, [pc, #508]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a7e      	ldr	r2, [pc, #504]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b7c      	ldr	r3, [pc, #496]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a7b      	ldr	r2, [pc, #492]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e01d      	b.n	8001e88 <HAL_RCC_OscConfig+0xd8>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0xc0>
 8001e56:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a75      	ldr	r2, [pc, #468]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a72      	ldr	r2, [pc, #456]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0xd8>
 8001e70:	4b6f      	ldr	r3, [pc, #444]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b6c      	ldr	r3, [pc, #432]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a6b      	ldr	r2, [pc, #428]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff fb68 	bl	8001564 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff fb64 	bl	8001564 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e229      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b61      	ldr	r3, [pc, #388]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0xe8>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fb54 	bl	8001564 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fb50 	bl	8001564 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e215      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	4b57      	ldr	r3, [pc, #348]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x110>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d069      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eee:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00b      	beq.n	8001f12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efa:	4b4d      	ldr	r3, [pc, #308]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d11c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x190>
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d116      	bne.n	8001f40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_RCC_OscConfig+0x17a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e1e9      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	493d      	ldr	r1, [pc, #244]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	e040      	b.n	8001fc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d023      	beq.n	8001f90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f48:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a38      	ldr	r2, [pc, #224]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff fb06 	bl	8001564 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fb02 	bl	8001564 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1c7      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6e:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4929      	ldr	r1, [pc, #164]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
 8001f8e:	e018      	b.n	8001fc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fae2 	bl	8001564 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa4:	f7ff fade 	bl	8001564 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e1a3      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d038      	beq.n	8002040 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d019      	beq.n	800200a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fda:	4a15      	ldr	r2, [pc, #84]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fabf 	bl	8001564 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fea:	f7ff fabb 	bl	8001564 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e180      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x23a>
 8002008:	e01a      	b.n	8002040 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 800200c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200e:	4a08      	ldr	r2, [pc, #32]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7ff faa5 	bl	8001564 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201e:	f7ff faa1 	bl	8001564 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d903      	bls.n	8002034 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e166      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
 8002030:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002034:	4b92      	ldr	r3, [pc, #584]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ee      	bne.n	800201e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80a4 	beq.w	8002196 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204e:	4b8c      	ldr	r3, [pc, #560]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10d      	bne.n	8002076 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	4b89      	ldr	r3, [pc, #548]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	4a88      	ldr	r2, [pc, #544]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002064:	6413      	str	r3, [r2, #64]	; 0x40
 8002066:	4b86      	ldr	r3, [pc, #536]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002072:	2301      	movs	r3, #1
 8002074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002076:	4b83      	ldr	r3, [pc, #524]	; (8002284 <HAL_RCC_OscConfig+0x4d4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d118      	bne.n	80020b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002082:	4b80      	ldr	r3, [pc, #512]	; (8002284 <HAL_RCC_OscConfig+0x4d4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7f      	ldr	r2, [pc, #508]	; (8002284 <HAL_RCC_OscConfig+0x4d4>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208e:	f7ff fa69 	bl	8001564 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002096:	f7ff fa65 	bl	8001564 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b64      	cmp	r3, #100	; 0x64
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e12a      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a8:	4b76      	ldr	r3, [pc, #472]	; (8002284 <HAL_RCC_OscConfig+0x4d4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x31a>
 80020bc:	4b70      	ldr	r3, [pc, #448]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	4a6f      	ldr	r2, [pc, #444]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6713      	str	r3, [r2, #112]	; 0x70
 80020c8:	e02d      	b.n	8002126 <HAL_RCC_OscConfig+0x376>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x33c>
 80020d2:	4b6b      	ldr	r3, [pc, #428]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d6:	4a6a      	ldr	r2, [pc, #424]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6713      	str	r3, [r2, #112]	; 0x70
 80020de:	4b68      	ldr	r3, [pc, #416]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a67      	ldr	r2, [pc, #412]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ea:	e01c      	b.n	8002126 <HAL_RCC_OscConfig+0x376>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d10c      	bne.n	800210e <HAL_RCC_OscConfig+0x35e>
 80020f4:	4b62      	ldr	r3, [pc, #392]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	4a61      	ldr	r2, [pc, #388]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002100:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002104:	4a5e      	ldr	r2, [pc, #376]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6713      	str	r3, [r2, #112]	; 0x70
 800210c:	e00b      	b.n	8002126 <HAL_RCC_OscConfig+0x376>
 800210e:	4b5c      	ldr	r3, [pc, #368]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a5b      	ldr	r2, [pc, #364]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a58      	ldr	r2, [pc, #352]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d015      	beq.n	800215a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7ff fa19 	bl	8001564 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7ff fa15 	bl	8001564 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	; 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0d8      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214c:	4b4c      	ldr	r3, [pc, #304]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ee      	beq.n	8002136 <HAL_RCC_OscConfig+0x386>
 8002158:	e014      	b.n	8002184 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215a:	f7ff fa03 	bl	8001564 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7ff f9ff 	bl	8001564 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e0c2      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002178:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ee      	bne.n	8002162 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002184:	7dfb      	ldrb	r3, [r7, #23]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a3c      	ldr	r2, [pc, #240]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80ae 	beq.w	80022fc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a0:	4b37      	ldr	r3, [pc, #220]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d06d      	beq.n	8002288 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d14b      	bne.n	800224c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b4:	4b32      	ldr	r3, [pc, #200]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a31      	ldr	r2, [pc, #196]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80021ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7ff f9d0 	bl	8001564 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7ff f9cc 	bl	8001564 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e091      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021da:	4b29      	ldr	r3, [pc, #164]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	019b      	lsls	r3, r3, #6
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	3b01      	subs	r3, #1
 8002200:	041b      	lsls	r3, r3, #16
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	061b      	lsls	r3, r3, #24
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	071b      	lsls	r3, r3, #28
 8002212:	491b      	ldr	r1, [pc, #108]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a18      	ldr	r2, [pc, #96]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800221e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7ff f99e 	bl	8001564 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7ff f99a 	bl	8001564 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e05f      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x47c>
 800224a:	e057      	b.n	80022fc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7ff f984 	bl	8001564 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7ff f980 	bl	8001564 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e045      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	4b03      	ldr	r3, [pc, #12]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x4b0>
 800227e:	e03d      	b.n	80022fc <HAL_RCC_OscConfig+0x54c>
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_RCC_OscConfig+0x558>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d030      	beq.n	80022f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d129      	bne.n	80022f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d122      	bne.n	80022f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d119      	bne.n	80022f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	085b      	lsrs	r3, r3, #1
 80022d0:	3b01      	subs	r3, #1
 80022d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d10f      	bne.n	80022f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0d0      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002324:	4b6a      	ldr	r3, [pc, #424]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d910      	bls.n	8002354 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b67      	ldr	r3, [pc, #412]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 020f 	bic.w	r2, r3, #15
 800233a:	4965      	ldr	r1, [pc, #404]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b63      	ldr	r3, [pc, #396]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0b8      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800236c:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a58      	ldr	r2, [pc, #352]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002376:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002384:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 800238a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800238e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	494d      	ldr	r1, [pc, #308]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d040      	beq.n	8002430 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d115      	bne.n	80023ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ce:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e073      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023de:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e06b      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ee:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f023 0203 	bic.w	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4936      	ldr	r1, [pc, #216]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002400:	f7ff f8b0 	bl	8001564 <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	e00a      	b.n	800241e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002408:	f7ff f8ac 	bl	8001564 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e053      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 020c 	and.w	r2, r3, #12
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	429a      	cmp	r2, r3
 800242e:	d1eb      	bne.n	8002408 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002430:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d210      	bcs.n	8002460 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 020f 	bic.w	r2, r3, #15
 8002446:	4922      	ldr	r1, [pc, #136]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e032      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4916      	ldr	r1, [pc, #88]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	490e      	ldr	r1, [pc, #56]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800249e:	f000 f821 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 80024a2:	4601      	mov	r1, r0
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_RCC_ClockConfig+0x1cc>)
 80024b0:	5cd3      	ldrb	r3, [r2, r3]
 80024b2:	fa21 f303 	lsr.w	r3, r1, r3
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1d0>)
 80024b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1d4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff f80c 	bl	80014dc <HAL_InitTick>

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00
 80024d4:	40023800 	.word	0x40023800
 80024d8:	08005af4 	.word	0x08005af4
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	2300      	movs	r3, #0
 80024f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024fa:	4b63      	ldr	r3, [pc, #396]	; (8002688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b04      	cmp	r3, #4
 8002504:	d007      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x32>
 8002506:	2b08      	cmp	r3, #8
 8002508:	d008      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x38>
 800250a:	2b00      	cmp	r3, #0
 800250c:	f040 80b4 	bne.w	8002678 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002510:	4b5e      	ldr	r3, [pc, #376]	; (800268c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002512:	60bb      	str	r3, [r7, #8]
      break;
 8002514:	e0b3      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002516:	4b5e      	ldr	r3, [pc, #376]	; (8002690 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002518:	60bb      	str	r3, [r7, #8]
      break;
 800251a:	e0b0      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800251c:	4b5a      	ldr	r3, [pc, #360]	; (8002688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002524:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002526:	4b58      	ldr	r3, [pc, #352]	; (8002688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d04a      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002532:	4b55      	ldr	r3, [pc, #340]	; (8002688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	099b      	lsrs	r3, r3, #6
 8002538:	f04f 0400 	mov.w	r4, #0
 800253c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	ea03 0501 	and.w	r5, r3, r1
 8002548:	ea04 0602 	and.w	r6, r4, r2
 800254c:	4629      	mov	r1, r5
 800254e:	4632      	mov	r2, r6
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	f04f 0400 	mov.w	r4, #0
 8002558:	0154      	lsls	r4, r2, #5
 800255a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800255e:	014b      	lsls	r3, r1, #5
 8002560:	4619      	mov	r1, r3
 8002562:	4622      	mov	r2, r4
 8002564:	1b49      	subs	r1, r1, r5
 8002566:	eb62 0206 	sbc.w	r2, r2, r6
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	f04f 0400 	mov.w	r4, #0
 8002572:	0194      	lsls	r4, r2, #6
 8002574:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002578:	018b      	lsls	r3, r1, #6
 800257a:	1a5b      	subs	r3, r3, r1
 800257c:	eb64 0402 	sbc.w	r4, r4, r2
 8002580:	f04f 0100 	mov.w	r1, #0
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	00e2      	lsls	r2, r4, #3
 800258a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800258e:	00d9      	lsls	r1, r3, #3
 8002590:	460b      	mov	r3, r1
 8002592:	4614      	mov	r4, r2
 8002594:	195b      	adds	r3, r3, r5
 8002596:	eb44 0406 	adc.w	r4, r4, r6
 800259a:	f04f 0100 	mov.w	r1, #0
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	0262      	lsls	r2, r4, #9
 80025a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80025a8:	0259      	lsls	r1, r3, #9
 80025aa:	460b      	mov	r3, r1
 80025ac:	4614      	mov	r4, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	4621      	mov	r1, r4
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f04f 0400 	mov.w	r4, #0
 80025b8:	461a      	mov	r2, r3
 80025ba:	4623      	mov	r3, r4
 80025bc:	f7fd fea0 	bl	8000300 <__aeabi_uldivmod>
 80025c0:	4603      	mov	r3, r0
 80025c2:	460c      	mov	r4, r1
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	e049      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c8:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	f04f 0400 	mov.w	r4, #0
 80025d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	ea03 0501 	and.w	r5, r3, r1
 80025de:	ea04 0602 	and.w	r6, r4, r2
 80025e2:	4629      	mov	r1, r5
 80025e4:	4632      	mov	r2, r6
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	f04f 0400 	mov.w	r4, #0
 80025ee:	0154      	lsls	r4, r2, #5
 80025f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025f4:	014b      	lsls	r3, r1, #5
 80025f6:	4619      	mov	r1, r3
 80025f8:	4622      	mov	r2, r4
 80025fa:	1b49      	subs	r1, r1, r5
 80025fc:	eb62 0206 	sbc.w	r2, r2, r6
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	f04f 0400 	mov.w	r4, #0
 8002608:	0194      	lsls	r4, r2, #6
 800260a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800260e:	018b      	lsls	r3, r1, #6
 8002610:	1a5b      	subs	r3, r3, r1
 8002612:	eb64 0402 	sbc.w	r4, r4, r2
 8002616:	f04f 0100 	mov.w	r1, #0
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	00e2      	lsls	r2, r4, #3
 8002620:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002624:	00d9      	lsls	r1, r3, #3
 8002626:	460b      	mov	r3, r1
 8002628:	4614      	mov	r4, r2
 800262a:	195b      	adds	r3, r3, r5
 800262c:	eb44 0406 	adc.w	r4, r4, r6
 8002630:	f04f 0100 	mov.w	r1, #0
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	02a2      	lsls	r2, r4, #10
 800263a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800263e:	0299      	lsls	r1, r3, #10
 8002640:	460b      	mov	r3, r1
 8002642:	4614      	mov	r4, r2
 8002644:	4618      	mov	r0, r3
 8002646:	4621      	mov	r1, r4
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f04f 0400 	mov.w	r4, #0
 800264e:	461a      	mov	r2, r3
 8002650:	4623      	mov	r3, r4
 8002652:	f7fd fe55 	bl	8000300 <__aeabi_uldivmod>
 8002656:	4603      	mov	r3, r0
 8002658:	460c      	mov	r4, r1
 800265a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	3301      	adds	r3, #1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	60bb      	str	r3, [r7, #8]
      break;
 8002676:	e002      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800267a:	60bb      	str	r3, [r7, #8]
      break;
 800267c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267e:	68bb      	ldr	r3, [r7, #8]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	00f42400 	.word	0x00f42400
 8002690:	007a1200 	.word	0x007a1200

08002694 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026b0:	f7ff fff0 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b4:	4601      	mov	r1, r0
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4a03      	ldr	r2, [pc, #12]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c2:	5cd3      	ldrb	r3, [r2, r3]
 80026c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	08005b04 	.word	0x08005b04

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d8:	f7ff ffdc 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026dc:	4601      	mov	r1, r0
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0b5b      	lsrs	r3, r3, #13
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4a03      	ldr	r2, [pc, #12]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ea:	5cd3      	ldrb	r3, [r2, r3]
 80026ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	08005b04 	.word	0x08005b04

080026fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d012      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002724:	4b69      	ldr	r3, [pc, #420]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a68      	ldr	r2, [pc, #416]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800272e:	6093      	str	r3, [r2, #8]
 8002730:	4b66      	ldr	r3, [pc, #408]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002738:	4964      	ldr	r1, [pc, #400]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002746:	2301      	movs	r3, #1
 8002748:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d017      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002756:	4b5d      	ldr	r3, [pc, #372]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800275c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002764:	4959      	ldr	r1, [pc, #356]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002774:	d101      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002776:	2301      	movs	r3, #1
 8002778:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002782:	2301      	movs	r3, #1
 8002784:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d017      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002792:	4b4e      	ldr	r3, [pc, #312]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002798:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	494a      	ldr	r1, [pc, #296]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b0:	d101      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027be:	2301      	movs	r3, #1
 80027c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80027ce:	2301      	movs	r3, #1
 80027d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 808b 	beq.w	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e0:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	4a39      	ldr	r2, [pc, #228]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ea:	6413      	str	r3, [r2, #64]	; 0x40
 80027ec:	4b37      	ldr	r3, [pc, #220]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027f8:	4b35      	ldr	r3, [pc, #212]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a34      	ldr	r2, [pc, #208]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002804:	f7fe feae 	bl	8001564 <HAL_GetTick>
 8002808:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280c:	f7fe feaa 	bl	8001564 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e38d      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800281e:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800282a:	4b28      	ldr	r3, [pc, #160]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002832:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d035      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d02e      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002848:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002850:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002862:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002868:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800286a:	4a18      	ldr	r2, [pc, #96]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002870:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d114      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fe72 	bl	8001564 <HAL_GetTick>
 8002880:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002882:	e00a      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7fe fe6e 	bl	8001564 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e34f      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289a:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0ee      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028b2:	d111      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028c2:	400b      	ands	r3, r1
 80028c4:	4901      	ldr	r1, [pc, #4]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
 80028ca:	e00b      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40007000 	.word	0x40007000
 80028d4:	0ffffcff 	.word	0x0ffffcff
 80028d8:	4bb3      	ldr	r3, [pc, #716]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4ab2      	ldr	r2, [pc, #712]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028e2:	6093      	str	r3, [r2, #8]
 80028e4:	4bb0      	ldr	r3, [pc, #704]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f0:	49ad      	ldr	r1, [pc, #692]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d010      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002902:	4ba9      	ldr	r3, [pc, #676]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002908:	4aa7      	ldr	r2, [pc, #668]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800290a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800290e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002912:	4ba5      	ldr	r3, [pc, #660]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002914:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	49a2      	ldr	r1, [pc, #648]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002930:	4b9d      	ldr	r3, [pc, #628]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800293e:	499a      	ldr	r1, [pc, #616]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002952:	4b95      	ldr	r3, [pc, #596]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002960:	4991      	ldr	r1, [pc, #580]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002974:	4b8c      	ldr	r3, [pc, #560]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002982:	4989      	ldr	r1, [pc, #548]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002996:	4b84      	ldr	r3, [pc, #528]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a4:	4980      	ldr	r1, [pc, #512]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029b8:	4b7b      	ldr	r3, [pc, #492]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	4978      	ldr	r1, [pc, #480]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029da:	4b73      	ldr	r3, [pc, #460]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e0:	f023 020c 	bic.w	r2, r3, #12
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e8:	496f      	ldr	r1, [pc, #444]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029fc:	4b6a      	ldr	r3, [pc, #424]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	4967      	ldr	r1, [pc, #412]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a1e:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2c:	495e      	ldr	r1, [pc, #376]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a40:	4b59      	ldr	r3, [pc, #356]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	4956      	ldr	r1, [pc, #344]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a62:	4b51      	ldr	r3, [pc, #324]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	494d      	ldr	r1, [pc, #308]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a84:	4b48      	ldr	r3, [pc, #288]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a92:	4945      	ldr	r1, [pc, #276]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002aa6:	4b40      	ldr	r3, [pc, #256]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab4:	493c      	ldr	r1, [pc, #240]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ac8:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ace:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ad6:	4934      	ldr	r1, [pc, #208]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d011      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002aea:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af8:	492b      	ldr	r1, [pc, #172]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b08:	d101      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b38:	491b      	ldr	r1, [pc, #108]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b4c:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b5c:	4912      	ldr	r1, [pc, #72]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00b      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b80:	4909      	ldr	r1, [pc, #36]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00f      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	e002      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	4985      	ldr	r1, [pc, #532]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00b      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002bc0:	4b80      	ldr	r3, [pc, #512]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd0:	497c      	ldr	r1, [pc, #496]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d005      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002be6:	f040 80d6 	bne.w	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bea:	4b76      	ldr	r3, [pc, #472]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a75      	ldr	r2, [pc, #468]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bf0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf6:	f7fe fcb5 	bl	8001564 <HAL_GetTick>
 8002bfa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bfe:	f7fe fcb1 	bl	8001564 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b64      	cmp	r3, #100	; 0x64
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e194      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c10:	4b6c      	ldr	r3, [pc, #432]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f0      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d021      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d11d      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c30:	4b64      	ldr	r3, [pc, #400]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c36:	0c1b      	lsrs	r3, r3, #16
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c3e:	4b61      	ldr	r3, [pc, #388]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c44:	0e1b      	lsrs	r3, r3, #24
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	019a      	lsls	r2, r3, #6
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	431a      	orrs	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	061b      	lsls	r3, r3, #24
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	071b      	lsls	r3, r3, #28
 8002c64:	4957      	ldr	r1, [pc, #348]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d004      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c80:	d00a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d02e      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c96:	d129      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c98:	4b4a      	ldr	r3, [pc, #296]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9e:	0c1b      	lsrs	r3, r3, #16
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ca6:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cac:	0f1b      	lsrs	r3, r3, #28
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	019a      	lsls	r2, r3, #6
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	071b      	lsls	r3, r3, #28
 8002ccc:	493d      	ldr	r1, [pc, #244]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cda:	f023 021f 	bic.w	r2, r3, #31
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	4937      	ldr	r1, [pc, #220]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01d      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cf8:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cfe:	0e1b      	lsrs	r3, r3, #24
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d06:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d0c:	0f1b      	lsrs	r3, r3, #28
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	019a      	lsls	r2, r3, #6
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	041b      	lsls	r3, r3, #16
 8002d20:	431a      	orrs	r2, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	431a      	orrs	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	071b      	lsls	r3, r3, #28
 8002d2c:	4925      	ldr	r1, [pc, #148]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d011      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	019a      	lsls	r2, r3, #6
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	041b      	lsls	r3, r3, #16
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	061b      	lsls	r3, r3, #24
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	071b      	lsls	r3, r3, #28
 8002d5c:	4919      	ldr	r1, [pc, #100]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d64:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a16      	ldr	r2, [pc, #88]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d70:	f7fe fbf8 	bl	8001564 <HAL_GetTick>
 8002d74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d78:	f7fe fbf4 	bl	8001564 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e0d7      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	f040 80cd 	bne.w	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a08      	ldr	r2, [pc, #32]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002daa:	f7fe fbdb 	bl	8001564 <HAL_GetTick>
 8002dae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002db2:	f7fe fbd7 	bl	8001564 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b64      	cmp	r3, #100	; 0x64
 8002dbe:	d903      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e0ba      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002dc4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dc8:	4b5e      	ldr	r3, [pc, #376]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd4:	d0ed      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d02e      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d12a      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002dfe:	4b51      	ldr	r3, [pc, #324]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e0c:	4b4d      	ldr	r3, [pc, #308]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	0f1b      	lsrs	r3, r3, #28
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	019a      	lsls	r2, r3, #6
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	041b      	lsls	r3, r3, #16
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	061b      	lsls	r3, r3, #24
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	071b      	lsls	r3, r3, #28
 8002e32:	4944      	ldr	r1, [pc, #272]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e3a:	4b42      	ldr	r3, [pc, #264]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	493d      	ldr	r1, [pc, #244]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d022      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e68:	d11d      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e6a:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	0e1b      	lsrs	r3, r3, #24
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e78:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	0f1b      	lsrs	r3, r3, #28
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	019a      	lsls	r2, r3, #6
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	041b      	lsls	r3, r3, #16
 8002e92:	431a      	orrs	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	061b      	lsls	r3, r3, #24
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	071b      	lsls	r3, r3, #28
 8002e9e:	4929      	ldr	r1, [pc, #164]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d028      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eb2:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb8:	0e1b      	lsrs	r3, r3, #24
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ec0:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	0c1b      	lsrs	r3, r3, #16
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	019a      	lsls	r2, r3, #6
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	041b      	lsls	r3, r3, #16
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	071b      	lsls	r3, r3, #28
 8002ee6:	4917      	ldr	r1, [pc, #92]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	4911      	ldr	r1, [pc, #68]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f10:	f7fe fb28 	bl	8001564 <HAL_GetTick>
 8002f14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f18:	f7fe fb24 	bl	8001564 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e007      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f36:	d1ef      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800

08002f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e01d      	b.n	8002f96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fe fa0c 	bl	800138c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f000 f97c 	bl	8003284 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <HAL_TIM_Base_Start_IT+0x50>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d00b      	beq.n	8002fe2 <HAL_TIM_Base_Start_IT+0x42>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd0:	d007      	beq.n	8002fe2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	00010007 	.word	0x00010007

08002ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	d122      	bne.n	8003050 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b02      	cmp	r3, #2
 8003016:	d11b      	bne.n	8003050 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0202 	mvn.w	r2, #2
 8003020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f905 	bl	8003246 <HAL_TIM_IC_CaptureCallback>
 800303c:	e005      	b.n	800304a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f8f7 	bl	8003232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f908 	bl	800325a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b04      	cmp	r3, #4
 800305c:	d122      	bne.n	80030a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b04      	cmp	r3, #4
 800306a:	d11b      	bne.n	80030a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0204 	mvn.w	r2, #4
 8003074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f8db 	bl	8003246 <HAL_TIM_IC_CaptureCallback>
 8003090:	e005      	b.n	800309e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f8cd 	bl	8003232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f8de 	bl	800325a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d122      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d11b      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0208 	mvn.w	r2, #8
 80030c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2204      	movs	r2, #4
 80030ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8b1 	bl	8003246 <HAL_TIM_IC_CaptureCallback>
 80030e4:	e005      	b.n	80030f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f8a3 	bl	8003232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f8b4 	bl	800325a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b10      	cmp	r3, #16
 8003104:	d122      	bne.n	800314c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	2b10      	cmp	r3, #16
 8003112:	d11b      	bne.n	800314c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0210 	mvn.w	r2, #16
 800311c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2208      	movs	r2, #8
 8003122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f887 	bl	8003246 <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f879 	bl	8003232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f88a 	bl	800325a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0201 	mvn.w	r2, #1
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fd fc16 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	2b80      	cmp	r3, #128	; 0x80
 8003184:	d10e      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003190:	2b80      	cmp	r3, #128	; 0x80
 8003192:	d107      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800319c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f91a 	bl	80033d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b2:	d10e      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031be:	2b80      	cmp	r3, #128	; 0x80
 80031c0:	d107      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f90d 	bl	80033ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d10e      	bne.n	80031fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d107      	bne.n	80031fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f838 	bl	800326e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b20      	cmp	r3, #32
 800320a:	d10e      	bne.n	800322a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b20      	cmp	r3, #32
 8003218:	d107      	bne.n	800322a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f06f 0220 	mvn.w	r2, #32
 8003222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f8cd 	bl	80033c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a40      	ldr	r2, [pc, #256]	; (8003398 <TIM_Base_SetConfig+0x114>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d013      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a2:	d00f      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3d      	ldr	r2, [pc, #244]	; (800339c <TIM_Base_SetConfig+0x118>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3c      	ldr	r2, [pc, #240]	; (80033a0 <TIM_Base_SetConfig+0x11c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3b      	ldr	r2, [pc, #236]	; (80033a4 <TIM_Base_SetConfig+0x120>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a3a      	ldr	r2, [pc, #232]	; (80033a8 <TIM_Base_SetConfig+0x124>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d108      	bne.n	80032d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2f      	ldr	r2, [pc, #188]	; (8003398 <TIM_Base_SetConfig+0x114>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d02b      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d027      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2c      	ldr	r2, [pc, #176]	; (800339c <TIM_Base_SetConfig+0x118>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d023      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a2b      	ldr	r2, [pc, #172]	; (80033a0 <TIM_Base_SetConfig+0x11c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01f      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a2a      	ldr	r2, [pc, #168]	; (80033a4 <TIM_Base_SetConfig+0x120>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d01b      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a29      	ldr	r2, [pc, #164]	; (80033a8 <TIM_Base_SetConfig+0x124>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d017      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a28      	ldr	r2, [pc, #160]	; (80033ac <TIM_Base_SetConfig+0x128>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a27      	ldr	r2, [pc, #156]	; (80033b0 <TIM_Base_SetConfig+0x12c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00f      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a26      	ldr	r2, [pc, #152]	; (80033b4 <TIM_Base_SetConfig+0x130>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00b      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a25      	ldr	r2, [pc, #148]	; (80033b8 <TIM_Base_SetConfig+0x134>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d007      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a24      	ldr	r2, [pc, #144]	; (80033bc <TIM_Base_SetConfig+0x138>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d003      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <TIM_Base_SetConfig+0x13c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d108      	bne.n	8003348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <TIM_Base_SetConfig+0x114>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_Base_SetConfig+0xf8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <TIM_Base_SetConfig+0x124>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d103      	bne.n	8003384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	615a      	str	r2, [r3, #20]
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40010000 	.word	0x40010000
 800339c:	40000400 	.word	0x40000400
 80033a0:	40000800 	.word	0x40000800
 80033a4:	40000c00 	.word	0x40000c00
 80033a8:	40010400 	.word	0x40010400
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800
 80033b8:	40001800 	.word	0x40001800
 80033bc:	40001c00 	.word	0x40001c00
 80033c0:	40002000 	.word	0x40002000

080033c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e040      	b.n	8003494 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd ffd8 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fb90 	bl	8003b64 <UART_SetConfig>
 8003444:	4603      	mov	r3, r0
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e022      	b.n	8003494 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fe2e 	bl	80040b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800346a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800347a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 feb5 	bl	80041fc <UART_CheckIdleState>
 8003492:	4603      	mov	r3, r0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d17f      	bne.n	80035b4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_UART_Transmit+0x24>
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e078      	b.n	80035b6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_UART_Transmit+0x36>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e071      	b.n	80035b6 <HAL_UART_Transmit+0x11a>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2221      	movs	r2, #33	; 0x21
 80034e4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80034e6:	f7fe f83d 	bl	8001564 <HAL_GetTick>
 80034ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	88fa      	ldrh	r2, [r7, #6]
 80034f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003504:	d108      	bne.n	8003518 <HAL_UART_Transmit+0x7c>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d104      	bne.n	8003518 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	e003      	b.n	8003520 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003528:	e02c      	b.n	8003584 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2200      	movs	r2, #0
 8003532:	2180      	movs	r1, #128	; 0x80
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fea6 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e038      	b.n	80035b6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10b      	bne.n	8003562 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	3302      	adds	r3, #2
 800355e:	61bb      	str	r3, [r7, #24]
 8003560:	e007      	b.n	8003572 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	3301      	adds	r3, #1
 8003570:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1cc      	bne.n	800352a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2200      	movs	r2, #0
 8003598:	2140      	movs	r1, #64	; 0x40
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fe73 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e005      	b.n	80035b6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	e000      	b.n	80035b6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80035b4:	2302      	movs	r3, #2
  }
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b08a      	sub	sp, #40	; 0x28
 80035c2:	af02      	add	r7, sp, #8
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	f040 80ba 	bne.w	800374c <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_UART_Receive+0x26>
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0b2      	b.n	800374e <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Receive+0x38>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e0ab      	b.n	800374e <HAL_UART_Receive+0x190>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2222      	movs	r2, #34	; 0x22
 8003608:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800360a:	f7fd ffab 	bl	8001564 <HAL_GetTick>
 800360e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	88fa      	ldrh	r2, [r7, #6]
 8003614:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003628:	d10e      	bne.n	8003648 <HAL_UART_Receive+0x8a>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <HAL_UART_Receive+0x80>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003638:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800363c:	e02d      	b.n	800369a <HAL_UART_Receive+0xdc>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	22ff      	movs	r2, #255	; 0xff
 8003642:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003646:	e028      	b.n	800369a <HAL_UART_Receive+0xdc>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10d      	bne.n	800366c <HAL_UART_Receive+0xae>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d104      	bne.n	8003662 <HAL_UART_Receive+0xa4>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	22ff      	movs	r2, #255	; 0xff
 800365c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003660:	e01b      	b.n	800369a <HAL_UART_Receive+0xdc>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	227f      	movs	r2, #127	; 0x7f
 8003666:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800366a:	e016      	b.n	800369a <HAL_UART_Receive+0xdc>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003674:	d10d      	bne.n	8003692 <HAL_UART_Receive+0xd4>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d104      	bne.n	8003688 <HAL_UART_Receive+0xca>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	227f      	movs	r2, #127	; 0x7f
 8003682:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003686:	e008      	b.n	800369a <HAL_UART_Receive+0xdc>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	223f      	movs	r2, #63	; 0x3f
 800368c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003690:	e003      	b.n	800369a <HAL_UART_Receive+0xdc>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036a0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036aa:	d108      	bne.n	80036be <HAL_UART_Receive+0x100>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	e003      	b.n	80036c6 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80036ce:	e032      	b.n	8003736 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2120      	movs	r1, #32
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fdd3 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e031      	b.n	800374e <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10c      	bne.n	800370a <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	8a7b      	ldrh	r3, [r7, #18]
 80036fa:	4013      	ands	r3, r2
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	3302      	adds	r3, #2
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	e00c      	b.n	8003724 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	b2da      	uxtb	r2, r3
 8003712:	8a7b      	ldrh	r3, [r7, #18]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	4013      	ands	r3, r2
 8003718:	b2da      	uxtb	r2, r3
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3301      	adds	r3, #1
 8003722:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1c6      	bne.n	80036d0 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	e000      	b.n	800374e <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800374c:	2302      	movs	r3, #2
  }
}
 800374e:	4618      	mov	r0, r3
 8003750:	3720      	adds	r7, #32
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	4613      	mov	r3, r2
 8003764:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800376a:	2b20      	cmp	r3, #32
 800376c:	f040 808a 	bne.w	8003884 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_UART_Receive_IT+0x24>
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e082      	b.n	8003886 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_UART_Receive_IT+0x36>
 800378a:	2302      	movs	r3, #2
 800378c:	e07b      	b.n	8003886 <HAL_UART_Receive_IT+0x12e>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ba:	d10e      	bne.n	80037da <HAL_UART_Receive_IT+0x82>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_UART_Receive_IT+0x78>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80037ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037ce:	e02d      	b.n	800382c <HAL_UART_Receive_IT+0xd4>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	22ff      	movs	r2, #255	; 0xff
 80037d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037d8:	e028      	b.n	800382c <HAL_UART_Receive_IT+0xd4>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10d      	bne.n	80037fe <HAL_UART_Receive_IT+0xa6>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d104      	bne.n	80037f4 <HAL_UART_Receive_IT+0x9c>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	22ff      	movs	r2, #255	; 0xff
 80037ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037f2:	e01b      	b.n	800382c <HAL_UART_Receive_IT+0xd4>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	227f      	movs	r2, #127	; 0x7f
 80037f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037fc:	e016      	b.n	800382c <HAL_UART_Receive_IT+0xd4>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003806:	d10d      	bne.n	8003824 <HAL_UART_Receive_IT+0xcc>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d104      	bne.n	800381a <HAL_UART_Receive_IT+0xc2>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	227f      	movs	r2, #127	; 0x7f
 8003814:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003818:	e008      	b.n	800382c <HAL_UART_Receive_IT+0xd4>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	223f      	movs	r2, #63	; 0x3f
 800381e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003822:	e003      	b.n	800382c <HAL_UART_Receive_IT+0xd4>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2222      	movs	r2, #34	; 0x22
 8003836:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003850:	d107      	bne.n	8003862 <HAL_UART_Receive_IT+0x10a>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d103      	bne.n	8003862 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a0d      	ldr	r2, [pc, #52]	; (8003894 <HAL_UART_Receive_IT+0x13c>)
 800385e:	661a      	str	r2, [r3, #96]	; 0x60
 8003860:	e002      	b.n	8003868 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <HAL_UART_Receive_IT+0x140>)
 8003866:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800387e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	e000      	b.n	8003886 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003884:	2302      	movs	r3, #2
  }
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	080044c1 	.word	0x080044c1
 8003898:	0800441b 	.word	0x0800441b

0800389c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	f640 030f 	movw	r3, #2063	; 0x80f
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d113      	bne.n	80038f4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00e      	beq.n	80038f4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8114 	beq.w	8003b12 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
      }
      return;
 80038f2:	e10e      	b.n	8003b12 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80d6 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d105      	bne.n	8003912 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80cb 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00e      	beq.n	800393a <HAL_UART_IRQHandler+0x9e>
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2201      	movs	r2, #1
 800392c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003932:	f043 0201 	orr.w	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00e      	beq.n	8003962 <HAL_UART_IRQHandler+0xc6>
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2202      	movs	r2, #2
 8003954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800395a:	f043 0204 	orr.w	r2, r3, #4
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00e      	beq.n	800398a <HAL_UART_IRQHandler+0xee>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2204      	movs	r2, #4
 800397c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003982:	f043 0202 	orr.w	r2, r3, #2
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d013      	beq.n	80039bc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d009      	beq.n	80039bc <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2208      	movs	r2, #8
 80039ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039b4:	f043 0208 	orr.w	r2, r3, #8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00f      	beq.n	80039e6 <HAL_UART_IRQHandler+0x14a>
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039de:	f043 0220 	orr.w	r2, r3, #32
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 8093 	beq.w	8003b16 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00c      	beq.n	8003a14 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a18:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	d004      	beq.n	8003a32 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d031      	beq.n	8003a96 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fca2 	bl	800437c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b40      	cmp	r3, #64	; 0x40
 8003a44:	d123      	bne.n	8003a8e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a54:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d013      	beq.n	8003a86 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a62:	4a30      	ldr	r2, [pc, #192]	; (8003b24 <HAL_UART_IRQHandler+0x288>)
 8003a64:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fec5 	bl	80017fa <HAL_DMA_Abort_IT>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003a80:	4610      	mov	r0, r2
 8003a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a84:	e00e      	b.n	8003aa4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f858 	bl	8003b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	e00a      	b.n	8003aa4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f854 	bl	8003b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	e006      	b.n	8003aa4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f850 	bl	8003b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003aa2:	e038      	b.n	8003b16 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	bf00      	nop
    return;
 8003aa6:	e036      	b.n	8003b16 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00d      	beq.n	8003ace <HAL_UART_IRQHandler+0x232>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ac4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f842 	bl	8003b50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003acc:	e026      	b.n	8003b1c <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00d      	beq.n	8003af4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d017      	beq.n	8003b1a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
    }
    return;
 8003af2:	e012      	b.n	8003b1a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00e      	beq.n	8003b1c <HAL_UART_IRQHandler+0x280>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d009      	beq.n	8003b1c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fc6d 	bl	80043e8 <UART_EndTransmit_IT>
    return;
 8003b0e:	bf00      	nop
 8003b10:	e004      	b.n	8003b1c <HAL_UART_IRQHandler+0x280>
      return;
 8003b12:	bf00      	nop
 8003b14:	e002      	b.n	8003b1c <HAL_UART_IRQHandler+0x280>
    return;
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <HAL_UART_IRQHandler+0x280>
    return;
 8003b1a:	bf00      	nop
  }

}
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	080043bd 	.word	0x080043bd

08003b28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4bb1      	ldr	r3, [pc, #708]	; (8003e58 <UART_SetConfig+0x2f4>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	6939      	ldr	r1, [r7, #16]
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a9f      	ldr	r2, [pc, #636]	; (8003e5c <UART_SetConfig+0x2f8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d121      	bne.n	8003c28 <UART_SetConfig+0xc4>
 8003be4:	4b9e      	ldr	r3, [pc, #632]	; (8003e60 <UART_SetConfig+0x2fc>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d816      	bhi.n	8003c20 <UART_SetConfig+0xbc>
 8003bf2:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <UART_SetConfig+0x94>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003c15 	.word	0x08003c15
 8003c00:	08003c0f 	.word	0x08003c0f
 8003c04:	08003c1b 	.word	0x08003c1b
 8003c08:	2301      	movs	r3, #1
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e151      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	77fb      	strb	r3, [r7, #31]
 8003c12:	e14e      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003c14:	2304      	movs	r3, #4
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	e14b      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	77fb      	strb	r3, [r7, #31]
 8003c1e:	e148      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003c20:	2310      	movs	r3, #16
 8003c22:	77fb      	strb	r3, [r7, #31]
 8003c24:	bf00      	nop
 8003c26:	e144      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a8d      	ldr	r2, [pc, #564]	; (8003e64 <UART_SetConfig+0x300>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d134      	bne.n	8003c9c <UART_SetConfig+0x138>
 8003c32:	4b8b      	ldr	r3, [pc, #556]	; (8003e60 <UART_SetConfig+0x2fc>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b0c      	cmp	r3, #12
 8003c3e:	d829      	bhi.n	8003c94 <UART_SetConfig+0x130>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <UART_SetConfig+0xe4>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c7d 	.word	0x08003c7d
 8003c4c:	08003c95 	.word	0x08003c95
 8003c50:	08003c95 	.word	0x08003c95
 8003c54:	08003c95 	.word	0x08003c95
 8003c58:	08003c89 	.word	0x08003c89
 8003c5c:	08003c95 	.word	0x08003c95
 8003c60:	08003c95 	.word	0x08003c95
 8003c64:	08003c95 	.word	0x08003c95
 8003c68:	08003c83 	.word	0x08003c83
 8003c6c:	08003c95 	.word	0x08003c95
 8003c70:	08003c95 	.word	0x08003c95
 8003c74:	08003c95 	.word	0x08003c95
 8003c78:	08003c8f 	.word	0x08003c8f
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	77fb      	strb	r3, [r7, #31]
 8003c80:	e117      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003c82:	2302      	movs	r3, #2
 8003c84:	77fb      	strb	r3, [r7, #31]
 8003c86:	e114      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e111      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003c8e:	2308      	movs	r3, #8
 8003c90:	77fb      	strb	r3, [r7, #31]
 8003c92:	e10e      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003c94:	2310      	movs	r3, #16
 8003c96:	77fb      	strb	r3, [r7, #31]
 8003c98:	bf00      	nop
 8003c9a:	e10a      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a71      	ldr	r2, [pc, #452]	; (8003e68 <UART_SetConfig+0x304>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d120      	bne.n	8003ce8 <UART_SetConfig+0x184>
 8003ca6:	4b6e      	ldr	r3, [pc, #440]	; (8003e60 <UART_SetConfig+0x2fc>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d00f      	beq.n	8003cd4 <UART_SetConfig+0x170>
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d802      	bhi.n	8003cbe <UART_SetConfig+0x15a>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <UART_SetConfig+0x164>
 8003cbc:	e010      	b.n	8003ce0 <UART_SetConfig+0x17c>
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d005      	beq.n	8003cce <UART_SetConfig+0x16a>
 8003cc2:	2b30      	cmp	r3, #48	; 0x30
 8003cc4:	d009      	beq.n	8003cda <UART_SetConfig+0x176>
 8003cc6:	e00b      	b.n	8003ce0 <UART_SetConfig+0x17c>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e0f1      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	77fb      	strb	r3, [r7, #31]
 8003cd2:	e0ee      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e0eb      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003cda:	2308      	movs	r3, #8
 8003cdc:	77fb      	strb	r3, [r7, #31]
 8003cde:	e0e8      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	bf00      	nop
 8003ce6:	e0e4      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a5f      	ldr	r2, [pc, #380]	; (8003e6c <UART_SetConfig+0x308>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d120      	bne.n	8003d34 <UART_SetConfig+0x1d0>
 8003cf2:	4b5b      	ldr	r3, [pc, #364]	; (8003e60 <UART_SetConfig+0x2fc>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cfc:	2b40      	cmp	r3, #64	; 0x40
 8003cfe:	d00f      	beq.n	8003d20 <UART_SetConfig+0x1bc>
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d802      	bhi.n	8003d0a <UART_SetConfig+0x1a6>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <UART_SetConfig+0x1b0>
 8003d08:	e010      	b.n	8003d2c <UART_SetConfig+0x1c8>
 8003d0a:	2b80      	cmp	r3, #128	; 0x80
 8003d0c:	d005      	beq.n	8003d1a <UART_SetConfig+0x1b6>
 8003d0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d10:	d009      	beq.n	8003d26 <UART_SetConfig+0x1c2>
 8003d12:	e00b      	b.n	8003d2c <UART_SetConfig+0x1c8>
 8003d14:	2300      	movs	r3, #0
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e0cb      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	77fb      	strb	r3, [r7, #31]
 8003d1e:	e0c8      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003d20:	2304      	movs	r3, #4
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	e0c5      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003d26:	2308      	movs	r3, #8
 8003d28:	77fb      	strb	r3, [r7, #31]
 8003d2a:	e0c2      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	bf00      	nop
 8003d32:	e0be      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a4d      	ldr	r2, [pc, #308]	; (8003e70 <UART_SetConfig+0x30c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d124      	bne.n	8003d88 <UART_SetConfig+0x224>
 8003d3e:	4b48      	ldr	r3, [pc, #288]	; (8003e60 <UART_SetConfig+0x2fc>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4c:	d012      	beq.n	8003d74 <UART_SetConfig+0x210>
 8003d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d52:	d802      	bhi.n	8003d5a <UART_SetConfig+0x1f6>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <UART_SetConfig+0x204>
 8003d58:	e012      	b.n	8003d80 <UART_SetConfig+0x21c>
 8003d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d5e:	d006      	beq.n	8003d6e <UART_SetConfig+0x20a>
 8003d60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d64:	d009      	beq.n	8003d7a <UART_SetConfig+0x216>
 8003d66:	e00b      	b.n	8003d80 <UART_SetConfig+0x21c>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e0a1      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	77fb      	strb	r3, [r7, #31]
 8003d72:	e09e      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003d74:	2304      	movs	r3, #4
 8003d76:	77fb      	strb	r3, [r7, #31]
 8003d78:	e09b      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003d7a:	2308      	movs	r3, #8
 8003d7c:	77fb      	strb	r3, [r7, #31]
 8003d7e:	e098      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003d80:	2310      	movs	r3, #16
 8003d82:	77fb      	strb	r3, [r7, #31]
 8003d84:	bf00      	nop
 8003d86:	e094      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a39      	ldr	r2, [pc, #228]	; (8003e74 <UART_SetConfig+0x310>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d124      	bne.n	8003ddc <UART_SetConfig+0x278>
 8003d92:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <UART_SetConfig+0x2fc>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da0:	d012      	beq.n	8003dc8 <UART_SetConfig+0x264>
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da6:	d802      	bhi.n	8003dae <UART_SetConfig+0x24a>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d007      	beq.n	8003dbc <UART_SetConfig+0x258>
 8003dac:	e012      	b.n	8003dd4 <UART_SetConfig+0x270>
 8003dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db2:	d006      	beq.n	8003dc2 <UART_SetConfig+0x25e>
 8003db4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db8:	d009      	beq.n	8003dce <UART_SetConfig+0x26a>
 8003dba:	e00b      	b.n	8003dd4 <UART_SetConfig+0x270>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e077      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e074      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e071      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e06e      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	bf00      	nop
 8003dda:	e06a      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a25      	ldr	r2, [pc, #148]	; (8003e78 <UART_SetConfig+0x314>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d124      	bne.n	8003e30 <UART_SetConfig+0x2cc>
 8003de6:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <UART_SetConfig+0x2fc>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df4:	d012      	beq.n	8003e1c <UART_SetConfig+0x2b8>
 8003df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfa:	d802      	bhi.n	8003e02 <UART_SetConfig+0x29e>
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d007      	beq.n	8003e10 <UART_SetConfig+0x2ac>
 8003e00:	e012      	b.n	8003e28 <UART_SetConfig+0x2c4>
 8003e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e06:	d006      	beq.n	8003e16 <UART_SetConfig+0x2b2>
 8003e08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e0c:	d009      	beq.n	8003e22 <UART_SetConfig+0x2be>
 8003e0e:	e00b      	b.n	8003e28 <UART_SetConfig+0x2c4>
 8003e10:	2300      	movs	r3, #0
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e04d      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003e16:	2302      	movs	r3, #2
 8003e18:	77fb      	strb	r3, [r7, #31]
 8003e1a:	e04a      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e047      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003e22:	2308      	movs	r3, #8
 8003e24:	77fb      	strb	r3, [r7, #31]
 8003e26:	e044      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003e28:	2310      	movs	r3, #16
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	bf00      	nop
 8003e2e:	e040      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a11      	ldr	r2, [pc, #68]	; (8003e7c <UART_SetConfig+0x318>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d139      	bne.n	8003eae <UART_SetConfig+0x34a>
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <UART_SetConfig+0x2fc>)
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e48:	d027      	beq.n	8003e9a <UART_SetConfig+0x336>
 8003e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e4e:	d817      	bhi.n	8003e80 <UART_SetConfig+0x31c>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01c      	beq.n	8003e8e <UART_SetConfig+0x32a>
 8003e54:	e027      	b.n	8003ea6 <UART_SetConfig+0x342>
 8003e56:	bf00      	nop
 8003e58:	efff69f3 	.word	0xefff69f3
 8003e5c:	40011000 	.word	0x40011000
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40004400 	.word	0x40004400
 8003e68:	40004800 	.word	0x40004800
 8003e6c:	40004c00 	.word	0x40004c00
 8003e70:	40005000 	.word	0x40005000
 8003e74:	40011400 	.word	0x40011400
 8003e78:	40007800 	.word	0x40007800
 8003e7c:	40007c00 	.word	0x40007c00
 8003e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e84:	d006      	beq.n	8003e94 <UART_SetConfig+0x330>
 8003e86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e8a:	d009      	beq.n	8003ea0 <UART_SetConfig+0x33c>
 8003e8c:	e00b      	b.n	8003ea6 <UART_SetConfig+0x342>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	77fb      	strb	r3, [r7, #31]
 8003e92:	e00e      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003e94:	2302      	movs	r3, #2
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e00b      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e008      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003ea0:	2308      	movs	r3, #8
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e005      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003ea6:	2310      	movs	r3, #16
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	bf00      	nop
 8003eac:	e001      	b.n	8003eb2 <UART_SetConfig+0x34e>
 8003eae:	2310      	movs	r3, #16
 8003eb0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eba:	d17f      	bne.n	8003fbc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003ebc:	7ffb      	ldrb	r3, [r7, #31]
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d85c      	bhi.n	8003f7c <UART_SetConfig+0x418>
 8003ec2:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <UART_SetConfig+0x364>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003eed 	.word	0x08003eed
 8003ecc:	08003f0d 	.word	0x08003f0d
 8003ed0:	08003f2d 	.word	0x08003f2d
 8003ed4:	08003f7d 	.word	0x08003f7d
 8003ed8:	08003f45 	.word	0x08003f45
 8003edc:	08003f7d 	.word	0x08003f7d
 8003ee0:	08003f7d 	.word	0x08003f7d
 8003ee4:	08003f7d 	.word	0x08003f7d
 8003ee8:	08003f65 	.word	0x08003f65
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eec:	f7fe fbde 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8003ef0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	005a      	lsls	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	085b      	lsrs	r3, r3, #1
 8003efc:	441a      	add	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	61bb      	str	r3, [r7, #24]
        break;
 8003f0a:	e03a      	b.n	8003f82 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f0c:	f7fe fbe2 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8003f10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	005a      	lsls	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	085b      	lsrs	r3, r3, #1
 8003f1c:	441a      	add	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	61bb      	str	r3, [r7, #24]
        break;
 8003f2a:	e02a      	b.n	8003f82 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	085a      	lsrs	r2, r3, #1
 8003f32:	4b5f      	ldr	r3, [pc, #380]	; (80040b0 <UART_SetConfig+0x54c>)
 8003f34:	4413      	add	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6852      	ldr	r2, [r2, #4]
 8003f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	61bb      	str	r3, [r7, #24]
        break;
 8003f42:	e01e      	b.n	8003f82 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f44:	f7fe face 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8003f48:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	005a      	lsls	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	441a      	add	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	61bb      	str	r3, [r7, #24]
        break;
 8003f62:	e00e      	b.n	8003f82 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	61bb      	str	r3, [r7, #24]
        break;
 8003f7a:	e002      	b.n	8003f82 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
        break;
 8003f80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b0f      	cmp	r3, #15
 8003f86:	d916      	bls.n	8003fb6 <UART_SetConfig+0x452>
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8e:	d212      	bcs.n	8003fb6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f023 030f 	bic.w	r3, r3, #15
 8003f98:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	897b      	ldrh	r3, [r7, #10]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	897a      	ldrh	r2, [r7, #10]
 8003fb2:	60da      	str	r2, [r3, #12]
 8003fb4:	e070      	b.n	8004098 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	75fb      	strb	r3, [r7, #23]
 8003fba:	e06d      	b.n	8004098 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003fbc:	7ffb      	ldrb	r3, [r7, #31]
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d859      	bhi.n	8004076 <UART_SetConfig+0x512>
 8003fc2:	a201      	add	r2, pc, #4	; (adr r2, 8003fc8 <UART_SetConfig+0x464>)
 8003fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc8:	08003fed 	.word	0x08003fed
 8003fcc:	0800400b 	.word	0x0800400b
 8003fd0:	08004029 	.word	0x08004029
 8003fd4:	08004077 	.word	0x08004077
 8003fd8:	08004041 	.word	0x08004041
 8003fdc:	08004077 	.word	0x08004077
 8003fe0:	08004077 	.word	0x08004077
 8003fe4:	08004077 	.word	0x08004077
 8003fe8:	0800405f 	.word	0x0800405f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fec:	f7fe fb5e 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8003ff0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	085a      	lsrs	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	441a      	add	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	b29b      	uxth	r3, r3
 8004006:	61bb      	str	r3, [r7, #24]
        break;
 8004008:	e038      	b.n	800407c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800400a:	f7fe fb63 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 800400e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	085a      	lsrs	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	441a      	add	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	b29b      	uxth	r3, r3
 8004024:	61bb      	str	r3, [r7, #24]
        break;
 8004026:	e029      	b.n	800407c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	085a      	lsrs	r2, r3, #1
 800402e:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <UART_SetConfig+0x550>)
 8004030:	4413      	add	r3, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6852      	ldr	r2, [r2, #4]
 8004036:	fbb3 f3f2 	udiv	r3, r3, r2
 800403a:	b29b      	uxth	r3, r3
 800403c:	61bb      	str	r3, [r7, #24]
        break;
 800403e:	e01d      	b.n	800407c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004040:	f7fe fa50 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8004044:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	085a      	lsrs	r2, r3, #1
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	441a      	add	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	b29b      	uxth	r3, r3
 800405a:	61bb      	str	r3, [r7, #24]
        break;
 800405c:	e00e      	b.n	800407c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004070:	b29b      	uxth	r3, r3
 8004072:	61bb      	str	r3, [r7, #24]
        break;
 8004074:	e002      	b.n	800407c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	75fb      	strb	r3, [r7, #23]
        break;
 800407a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b0f      	cmp	r3, #15
 8004080:	d908      	bls.n	8004094 <UART_SetConfig+0x530>
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004088:	d204      	bcs.n	8004094 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	e001      	b.n	8004098 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3720      	adds	r7, #32
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	01e84800 	.word	0x01e84800
 80040b4:	00f42400 	.word	0x00f42400

080040b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01a      	beq.n	80041ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b6:	d10a      	bne.n	80041ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  }
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af02      	add	r7, sp, #8
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800420a:	f7fd f9ab 	bl	8001564 <HAL_GetTick>
 800420e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b08      	cmp	r3, #8
 800421c:	d10e      	bne.n	800423c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800421e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f82a 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e020      	b.n	800427e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b04      	cmp	r3, #4
 8004248:	d10e      	bne.n	8004268 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800424a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f814 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e00a      	b.n	800427e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	4613      	mov	r3, r2
 8004294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004296:	e05d      	b.n	8004354 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d059      	beq.n	8004354 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a0:	f7fd f960 	bl	8001564 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d302      	bcc.n	80042b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d11b      	bne.n	80042ee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e042      	b.n	8004374 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d02b      	beq.n	8004354 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430a:	d123      	bne.n	8004354 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004314:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004324:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2220      	movs	r2, #32
 800433a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e00f      	b.n	8004374 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	69da      	ldr	r2, [r3, #28]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4013      	ands	r3, r2
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	429a      	cmp	r2, r3
 8004362:	bf0c      	ite	eq
 8004364:	2301      	moveq	r3, #1
 8004366:	2300      	movne	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	429a      	cmp	r2, r3
 8004370:	d092      	beq.n	8004298 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004392:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0201 	bic.w	r2, r2, #1
 80043a2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	661a      	str	r2, [r3, #96]	; 0x60
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7ff fbae 	bl	8003b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043e0:	bf00      	nop
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043fe:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff fb8b 	bl	8003b28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004428:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442e:	2b22      	cmp	r3, #34	; 0x22
 8004430:	d13a      	bne.n	80044a8 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800443a:	89bb      	ldrh	r3, [r7, #12]
 800443c:	b2d9      	uxtb	r1, r3
 800443e:	89fb      	ldrh	r3, [r7, #14]
 8004440:	b2da      	uxtb	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	400a      	ands	r2, r1
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d121      	bne.n	80044b8 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004482:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fc fafb 	bl	8000a9c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044a6:	e007      	b.n	80044b8 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0208 	orr.w	r2, r2, #8
 80044b6:	619a      	str	r2, [r3, #24]
}
 80044b8:	bf00      	nop
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044ce:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044d4:	2b22      	cmp	r3, #34	; 0x22
 80044d6:	d13a      	bne.n	800454e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80044e6:	89ba      	ldrh	r2, [r7, #12]
 80044e8:	89fb      	ldrh	r3, [r7, #14]
 80044ea:	4013      	ands	r3, r2
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	1c9a      	adds	r2, r3, #2
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d121      	bne.n	800455e <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004528:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc faa8 	bl	8000a9c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800454c:	e007      	b.n	800455e <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0208 	orr.w	r2, r2, #8
 800455c:	619a      	str	r2, [r3, #24]
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <__errno>:
 8004568:	4b01      	ldr	r3, [pc, #4]	; (8004570 <__errno+0x8>)
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	2000000c 	.word	0x2000000c

08004574 <__libc_init_array>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	4e0d      	ldr	r6, [pc, #52]	; (80045ac <__libc_init_array+0x38>)
 8004578:	4c0d      	ldr	r4, [pc, #52]	; (80045b0 <__libc_init_array+0x3c>)
 800457a:	1ba4      	subs	r4, r4, r6
 800457c:	10a4      	asrs	r4, r4, #2
 800457e:	2500      	movs	r5, #0
 8004580:	42a5      	cmp	r5, r4
 8004582:	d109      	bne.n	8004598 <__libc_init_array+0x24>
 8004584:	4e0b      	ldr	r6, [pc, #44]	; (80045b4 <__libc_init_array+0x40>)
 8004586:	4c0c      	ldr	r4, [pc, #48]	; (80045b8 <__libc_init_array+0x44>)
 8004588:	f001 f81e 	bl	80055c8 <_init>
 800458c:	1ba4      	subs	r4, r4, r6
 800458e:	10a4      	asrs	r4, r4, #2
 8004590:	2500      	movs	r5, #0
 8004592:	42a5      	cmp	r5, r4
 8004594:	d105      	bne.n	80045a2 <__libc_init_array+0x2e>
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800459c:	4798      	blx	r3
 800459e:	3501      	adds	r5, #1
 80045a0:	e7ee      	b.n	8004580 <__libc_init_array+0xc>
 80045a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045a6:	4798      	blx	r3
 80045a8:	3501      	adds	r5, #1
 80045aa:	e7f2      	b.n	8004592 <__libc_init_array+0x1e>
 80045ac:	08005bac 	.word	0x08005bac
 80045b0:	08005bac 	.word	0x08005bac
 80045b4:	08005bac 	.word	0x08005bac
 80045b8:	08005bb0 	.word	0x08005bb0

080045bc <memset>:
 80045bc:	4402      	add	r2, r0
 80045be:	4603      	mov	r3, r0
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d100      	bne.n	80045c6 <memset+0xa>
 80045c4:	4770      	bx	lr
 80045c6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ca:	e7f9      	b.n	80045c0 <memset+0x4>

080045cc <iprintf>:
 80045cc:	b40f      	push	{r0, r1, r2, r3}
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <iprintf+0x2c>)
 80045d0:	b513      	push	{r0, r1, r4, lr}
 80045d2:	681c      	ldr	r4, [r3, #0]
 80045d4:	b124      	cbz	r4, 80045e0 <iprintf+0x14>
 80045d6:	69a3      	ldr	r3, [r4, #24]
 80045d8:	b913      	cbnz	r3, 80045e0 <iprintf+0x14>
 80045da:	4620      	mov	r0, r4
 80045dc:	f000 fad0 	bl	8004b80 <__sinit>
 80045e0:	ab05      	add	r3, sp, #20
 80045e2:	9a04      	ldr	r2, [sp, #16]
 80045e4:	68a1      	ldr	r1, [r4, #8]
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	4620      	mov	r0, r4
 80045ea:	f000 fc91 	bl	8004f10 <_vfiprintf_r>
 80045ee:	b002      	add	sp, #8
 80045f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f4:	b004      	add	sp, #16
 80045f6:	4770      	bx	lr
 80045f8:	2000000c 	.word	0x2000000c

080045fc <_puts_r>:
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	460e      	mov	r6, r1
 8004600:	4605      	mov	r5, r0
 8004602:	b118      	cbz	r0, 800460c <_puts_r+0x10>
 8004604:	6983      	ldr	r3, [r0, #24]
 8004606:	b90b      	cbnz	r3, 800460c <_puts_r+0x10>
 8004608:	f000 faba 	bl	8004b80 <__sinit>
 800460c:	69ab      	ldr	r3, [r5, #24]
 800460e:	68ac      	ldr	r4, [r5, #8]
 8004610:	b913      	cbnz	r3, 8004618 <_puts_r+0x1c>
 8004612:	4628      	mov	r0, r5
 8004614:	f000 fab4 	bl	8004b80 <__sinit>
 8004618:	4b23      	ldr	r3, [pc, #140]	; (80046a8 <_puts_r+0xac>)
 800461a:	429c      	cmp	r4, r3
 800461c:	d117      	bne.n	800464e <_puts_r+0x52>
 800461e:	686c      	ldr	r4, [r5, #4]
 8004620:	89a3      	ldrh	r3, [r4, #12]
 8004622:	071b      	lsls	r3, r3, #28
 8004624:	d51d      	bpl.n	8004662 <_puts_r+0x66>
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	b1db      	cbz	r3, 8004662 <_puts_r+0x66>
 800462a:	3e01      	subs	r6, #1
 800462c:	68a3      	ldr	r3, [r4, #8]
 800462e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004632:	3b01      	subs	r3, #1
 8004634:	60a3      	str	r3, [r4, #8]
 8004636:	b9e9      	cbnz	r1, 8004674 <_puts_r+0x78>
 8004638:	2b00      	cmp	r3, #0
 800463a:	da2e      	bge.n	800469a <_puts_r+0x9e>
 800463c:	4622      	mov	r2, r4
 800463e:	210a      	movs	r1, #10
 8004640:	4628      	mov	r0, r5
 8004642:	f000 f8ed 	bl	8004820 <__swbuf_r>
 8004646:	3001      	adds	r0, #1
 8004648:	d011      	beq.n	800466e <_puts_r+0x72>
 800464a:	200a      	movs	r0, #10
 800464c:	e011      	b.n	8004672 <_puts_r+0x76>
 800464e:	4b17      	ldr	r3, [pc, #92]	; (80046ac <_puts_r+0xb0>)
 8004650:	429c      	cmp	r4, r3
 8004652:	d101      	bne.n	8004658 <_puts_r+0x5c>
 8004654:	68ac      	ldr	r4, [r5, #8]
 8004656:	e7e3      	b.n	8004620 <_puts_r+0x24>
 8004658:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <_puts_r+0xb4>)
 800465a:	429c      	cmp	r4, r3
 800465c:	bf08      	it	eq
 800465e:	68ec      	ldreq	r4, [r5, #12]
 8004660:	e7de      	b.n	8004620 <_puts_r+0x24>
 8004662:	4621      	mov	r1, r4
 8004664:	4628      	mov	r0, r5
 8004666:	f000 f92d 	bl	80048c4 <__swsetup_r>
 800466a:	2800      	cmp	r0, #0
 800466c:	d0dd      	beq.n	800462a <_puts_r+0x2e>
 800466e:	f04f 30ff 	mov.w	r0, #4294967295
 8004672:	bd70      	pop	{r4, r5, r6, pc}
 8004674:	2b00      	cmp	r3, #0
 8004676:	da04      	bge.n	8004682 <_puts_r+0x86>
 8004678:	69a2      	ldr	r2, [r4, #24]
 800467a:	429a      	cmp	r2, r3
 800467c:	dc06      	bgt.n	800468c <_puts_r+0x90>
 800467e:	290a      	cmp	r1, #10
 8004680:	d004      	beq.n	800468c <_puts_r+0x90>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	6022      	str	r2, [r4, #0]
 8004688:	7019      	strb	r1, [r3, #0]
 800468a:	e7cf      	b.n	800462c <_puts_r+0x30>
 800468c:	4622      	mov	r2, r4
 800468e:	4628      	mov	r0, r5
 8004690:	f000 f8c6 	bl	8004820 <__swbuf_r>
 8004694:	3001      	adds	r0, #1
 8004696:	d1c9      	bne.n	800462c <_puts_r+0x30>
 8004698:	e7e9      	b.n	800466e <_puts_r+0x72>
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	200a      	movs	r0, #10
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	6022      	str	r2, [r4, #0]
 80046a2:	7018      	strb	r0, [r3, #0]
 80046a4:	e7e5      	b.n	8004672 <_puts_r+0x76>
 80046a6:	bf00      	nop
 80046a8:	08005b30 	.word	0x08005b30
 80046ac:	08005b50 	.word	0x08005b50
 80046b0:	08005b10 	.word	0x08005b10

080046b4 <puts>:
 80046b4:	4b02      	ldr	r3, [pc, #8]	; (80046c0 <puts+0xc>)
 80046b6:	4601      	mov	r1, r0
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	f7ff bf9f 	b.w	80045fc <_puts_r>
 80046be:	bf00      	nop
 80046c0:	2000000c 	.word	0x2000000c

080046c4 <setvbuf>:
 80046c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80046c8:	461d      	mov	r5, r3
 80046ca:	4b51      	ldr	r3, [pc, #324]	; (8004810 <setvbuf+0x14c>)
 80046cc:	681e      	ldr	r6, [r3, #0]
 80046ce:	4604      	mov	r4, r0
 80046d0:	460f      	mov	r7, r1
 80046d2:	4690      	mov	r8, r2
 80046d4:	b126      	cbz	r6, 80046e0 <setvbuf+0x1c>
 80046d6:	69b3      	ldr	r3, [r6, #24]
 80046d8:	b913      	cbnz	r3, 80046e0 <setvbuf+0x1c>
 80046da:	4630      	mov	r0, r6
 80046dc:	f000 fa50 	bl	8004b80 <__sinit>
 80046e0:	4b4c      	ldr	r3, [pc, #304]	; (8004814 <setvbuf+0x150>)
 80046e2:	429c      	cmp	r4, r3
 80046e4:	d152      	bne.n	800478c <setvbuf+0xc8>
 80046e6:	6874      	ldr	r4, [r6, #4]
 80046e8:	f1b8 0f02 	cmp.w	r8, #2
 80046ec:	d006      	beq.n	80046fc <setvbuf+0x38>
 80046ee:	f1b8 0f01 	cmp.w	r8, #1
 80046f2:	f200 8089 	bhi.w	8004808 <setvbuf+0x144>
 80046f6:	2d00      	cmp	r5, #0
 80046f8:	f2c0 8086 	blt.w	8004808 <setvbuf+0x144>
 80046fc:	4621      	mov	r1, r4
 80046fe:	4630      	mov	r0, r6
 8004700:	f000 f9d4 	bl	8004aac <_fflush_r>
 8004704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004706:	b141      	cbz	r1, 800471a <setvbuf+0x56>
 8004708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800470c:	4299      	cmp	r1, r3
 800470e:	d002      	beq.n	8004716 <setvbuf+0x52>
 8004710:	4630      	mov	r0, r6
 8004712:	f000 fb2b 	bl	8004d6c <_free_r>
 8004716:	2300      	movs	r3, #0
 8004718:	6363      	str	r3, [r4, #52]	; 0x34
 800471a:	2300      	movs	r3, #0
 800471c:	61a3      	str	r3, [r4, #24]
 800471e:	6063      	str	r3, [r4, #4]
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	061b      	lsls	r3, r3, #24
 8004724:	d503      	bpl.n	800472e <setvbuf+0x6a>
 8004726:	6921      	ldr	r1, [r4, #16]
 8004728:	4630      	mov	r0, r6
 800472a:	f000 fb1f 	bl	8004d6c <_free_r>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004734:	f023 0303 	bic.w	r3, r3, #3
 8004738:	f1b8 0f02 	cmp.w	r8, #2
 800473c:	81a3      	strh	r3, [r4, #12]
 800473e:	d05d      	beq.n	80047fc <setvbuf+0x138>
 8004740:	ab01      	add	r3, sp, #4
 8004742:	466a      	mov	r2, sp
 8004744:	4621      	mov	r1, r4
 8004746:	4630      	mov	r0, r6
 8004748:	f000 faa4 	bl	8004c94 <__swhatbuf_r>
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	4318      	orrs	r0, r3
 8004750:	81a0      	strh	r0, [r4, #12]
 8004752:	bb2d      	cbnz	r5, 80047a0 <setvbuf+0xdc>
 8004754:	9d00      	ldr	r5, [sp, #0]
 8004756:	4628      	mov	r0, r5
 8004758:	f000 fb00 	bl	8004d5c <malloc>
 800475c:	4607      	mov	r7, r0
 800475e:	2800      	cmp	r0, #0
 8004760:	d14e      	bne.n	8004800 <setvbuf+0x13c>
 8004762:	f8dd 9000 	ldr.w	r9, [sp]
 8004766:	45a9      	cmp	r9, r5
 8004768:	d13c      	bne.n	80047e4 <setvbuf+0x120>
 800476a:	f04f 30ff 	mov.w	r0, #4294967295
 800476e:	89a3      	ldrh	r3, [r4, #12]
 8004770:	f043 0302 	orr.w	r3, r3, #2
 8004774:	81a3      	strh	r3, [r4, #12]
 8004776:	2300      	movs	r3, #0
 8004778:	60a3      	str	r3, [r4, #8]
 800477a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	6123      	str	r3, [r4, #16]
 8004782:	2301      	movs	r3, #1
 8004784:	6163      	str	r3, [r4, #20]
 8004786:	b003      	add	sp, #12
 8004788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800478c:	4b22      	ldr	r3, [pc, #136]	; (8004818 <setvbuf+0x154>)
 800478e:	429c      	cmp	r4, r3
 8004790:	d101      	bne.n	8004796 <setvbuf+0xd2>
 8004792:	68b4      	ldr	r4, [r6, #8]
 8004794:	e7a8      	b.n	80046e8 <setvbuf+0x24>
 8004796:	4b21      	ldr	r3, [pc, #132]	; (800481c <setvbuf+0x158>)
 8004798:	429c      	cmp	r4, r3
 800479a:	bf08      	it	eq
 800479c:	68f4      	ldreq	r4, [r6, #12]
 800479e:	e7a3      	b.n	80046e8 <setvbuf+0x24>
 80047a0:	2f00      	cmp	r7, #0
 80047a2:	d0d8      	beq.n	8004756 <setvbuf+0x92>
 80047a4:	69b3      	ldr	r3, [r6, #24]
 80047a6:	b913      	cbnz	r3, 80047ae <setvbuf+0xea>
 80047a8:	4630      	mov	r0, r6
 80047aa:	f000 f9e9 	bl	8004b80 <__sinit>
 80047ae:	f1b8 0f01 	cmp.w	r8, #1
 80047b2:	bf08      	it	eq
 80047b4:	89a3      	ldrheq	r3, [r4, #12]
 80047b6:	6027      	str	r7, [r4, #0]
 80047b8:	bf04      	itt	eq
 80047ba:	f043 0301 	orreq.w	r3, r3, #1
 80047be:	81a3      	strheq	r3, [r4, #12]
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	f013 0008 	ands.w	r0, r3, #8
 80047c6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80047ca:	d01b      	beq.n	8004804 <setvbuf+0x140>
 80047cc:	f013 0001 	ands.w	r0, r3, #1
 80047d0:	bf18      	it	ne
 80047d2:	426d      	negne	r5, r5
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	bf1d      	ittte	ne
 80047da:	60a3      	strne	r3, [r4, #8]
 80047dc:	61a5      	strne	r5, [r4, #24]
 80047de:	4618      	movne	r0, r3
 80047e0:	60a5      	streq	r5, [r4, #8]
 80047e2:	e7d0      	b.n	8004786 <setvbuf+0xc2>
 80047e4:	4648      	mov	r0, r9
 80047e6:	f000 fab9 	bl	8004d5c <malloc>
 80047ea:	4607      	mov	r7, r0
 80047ec:	2800      	cmp	r0, #0
 80047ee:	d0bc      	beq.n	800476a <setvbuf+0xa6>
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	464d      	mov	r5, r9
 80047fa:	e7d3      	b.n	80047a4 <setvbuf+0xe0>
 80047fc:	2000      	movs	r0, #0
 80047fe:	e7b6      	b.n	800476e <setvbuf+0xaa>
 8004800:	46a9      	mov	r9, r5
 8004802:	e7f5      	b.n	80047f0 <setvbuf+0x12c>
 8004804:	60a0      	str	r0, [r4, #8]
 8004806:	e7be      	b.n	8004786 <setvbuf+0xc2>
 8004808:	f04f 30ff 	mov.w	r0, #4294967295
 800480c:	e7bb      	b.n	8004786 <setvbuf+0xc2>
 800480e:	bf00      	nop
 8004810:	2000000c 	.word	0x2000000c
 8004814:	08005b30 	.word	0x08005b30
 8004818:	08005b50 	.word	0x08005b50
 800481c:	08005b10 	.word	0x08005b10

08004820 <__swbuf_r>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	460e      	mov	r6, r1
 8004824:	4614      	mov	r4, r2
 8004826:	4605      	mov	r5, r0
 8004828:	b118      	cbz	r0, 8004832 <__swbuf_r+0x12>
 800482a:	6983      	ldr	r3, [r0, #24]
 800482c:	b90b      	cbnz	r3, 8004832 <__swbuf_r+0x12>
 800482e:	f000 f9a7 	bl	8004b80 <__sinit>
 8004832:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <__swbuf_r+0x98>)
 8004834:	429c      	cmp	r4, r3
 8004836:	d12a      	bne.n	800488e <__swbuf_r+0x6e>
 8004838:	686c      	ldr	r4, [r5, #4]
 800483a:	69a3      	ldr	r3, [r4, #24]
 800483c:	60a3      	str	r3, [r4, #8]
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	071a      	lsls	r2, r3, #28
 8004842:	d52e      	bpl.n	80048a2 <__swbuf_r+0x82>
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	b363      	cbz	r3, 80048a2 <__swbuf_r+0x82>
 8004848:	6923      	ldr	r3, [r4, #16]
 800484a:	6820      	ldr	r0, [r4, #0]
 800484c:	1ac0      	subs	r0, r0, r3
 800484e:	6963      	ldr	r3, [r4, #20]
 8004850:	b2f6      	uxtb	r6, r6
 8004852:	4283      	cmp	r3, r0
 8004854:	4637      	mov	r7, r6
 8004856:	dc04      	bgt.n	8004862 <__swbuf_r+0x42>
 8004858:	4621      	mov	r1, r4
 800485a:	4628      	mov	r0, r5
 800485c:	f000 f926 	bl	8004aac <_fflush_r>
 8004860:	bb28      	cbnz	r0, 80048ae <__swbuf_r+0x8e>
 8004862:	68a3      	ldr	r3, [r4, #8]
 8004864:	3b01      	subs	r3, #1
 8004866:	60a3      	str	r3, [r4, #8]
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	6022      	str	r2, [r4, #0]
 800486e:	701e      	strb	r6, [r3, #0]
 8004870:	6963      	ldr	r3, [r4, #20]
 8004872:	3001      	adds	r0, #1
 8004874:	4283      	cmp	r3, r0
 8004876:	d004      	beq.n	8004882 <__swbuf_r+0x62>
 8004878:	89a3      	ldrh	r3, [r4, #12]
 800487a:	07db      	lsls	r3, r3, #31
 800487c:	d519      	bpl.n	80048b2 <__swbuf_r+0x92>
 800487e:	2e0a      	cmp	r6, #10
 8004880:	d117      	bne.n	80048b2 <__swbuf_r+0x92>
 8004882:	4621      	mov	r1, r4
 8004884:	4628      	mov	r0, r5
 8004886:	f000 f911 	bl	8004aac <_fflush_r>
 800488a:	b190      	cbz	r0, 80048b2 <__swbuf_r+0x92>
 800488c:	e00f      	b.n	80048ae <__swbuf_r+0x8e>
 800488e:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <__swbuf_r+0x9c>)
 8004890:	429c      	cmp	r4, r3
 8004892:	d101      	bne.n	8004898 <__swbuf_r+0x78>
 8004894:	68ac      	ldr	r4, [r5, #8]
 8004896:	e7d0      	b.n	800483a <__swbuf_r+0x1a>
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <__swbuf_r+0xa0>)
 800489a:	429c      	cmp	r4, r3
 800489c:	bf08      	it	eq
 800489e:	68ec      	ldreq	r4, [r5, #12]
 80048a0:	e7cb      	b.n	800483a <__swbuf_r+0x1a>
 80048a2:	4621      	mov	r1, r4
 80048a4:	4628      	mov	r0, r5
 80048a6:	f000 f80d 	bl	80048c4 <__swsetup_r>
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d0cc      	beq.n	8004848 <__swbuf_r+0x28>
 80048ae:	f04f 37ff 	mov.w	r7, #4294967295
 80048b2:	4638      	mov	r0, r7
 80048b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b6:	bf00      	nop
 80048b8:	08005b30 	.word	0x08005b30
 80048bc:	08005b50 	.word	0x08005b50
 80048c0:	08005b10 	.word	0x08005b10

080048c4 <__swsetup_r>:
 80048c4:	4b32      	ldr	r3, [pc, #200]	; (8004990 <__swsetup_r+0xcc>)
 80048c6:	b570      	push	{r4, r5, r6, lr}
 80048c8:	681d      	ldr	r5, [r3, #0]
 80048ca:	4606      	mov	r6, r0
 80048cc:	460c      	mov	r4, r1
 80048ce:	b125      	cbz	r5, 80048da <__swsetup_r+0x16>
 80048d0:	69ab      	ldr	r3, [r5, #24]
 80048d2:	b913      	cbnz	r3, 80048da <__swsetup_r+0x16>
 80048d4:	4628      	mov	r0, r5
 80048d6:	f000 f953 	bl	8004b80 <__sinit>
 80048da:	4b2e      	ldr	r3, [pc, #184]	; (8004994 <__swsetup_r+0xd0>)
 80048dc:	429c      	cmp	r4, r3
 80048de:	d10f      	bne.n	8004900 <__swsetup_r+0x3c>
 80048e0:	686c      	ldr	r4, [r5, #4]
 80048e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	0715      	lsls	r5, r2, #28
 80048ea:	d42c      	bmi.n	8004946 <__swsetup_r+0x82>
 80048ec:	06d0      	lsls	r0, r2, #27
 80048ee:	d411      	bmi.n	8004914 <__swsetup_r+0x50>
 80048f0:	2209      	movs	r2, #9
 80048f2:	6032      	str	r2, [r6, #0]
 80048f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f8:	81a3      	strh	r3, [r4, #12]
 80048fa:	f04f 30ff 	mov.w	r0, #4294967295
 80048fe:	e03e      	b.n	800497e <__swsetup_r+0xba>
 8004900:	4b25      	ldr	r3, [pc, #148]	; (8004998 <__swsetup_r+0xd4>)
 8004902:	429c      	cmp	r4, r3
 8004904:	d101      	bne.n	800490a <__swsetup_r+0x46>
 8004906:	68ac      	ldr	r4, [r5, #8]
 8004908:	e7eb      	b.n	80048e2 <__swsetup_r+0x1e>
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <__swsetup_r+0xd8>)
 800490c:	429c      	cmp	r4, r3
 800490e:	bf08      	it	eq
 8004910:	68ec      	ldreq	r4, [r5, #12]
 8004912:	e7e6      	b.n	80048e2 <__swsetup_r+0x1e>
 8004914:	0751      	lsls	r1, r2, #29
 8004916:	d512      	bpl.n	800493e <__swsetup_r+0x7a>
 8004918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800491a:	b141      	cbz	r1, 800492e <__swsetup_r+0x6a>
 800491c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004920:	4299      	cmp	r1, r3
 8004922:	d002      	beq.n	800492a <__swsetup_r+0x66>
 8004924:	4630      	mov	r0, r6
 8004926:	f000 fa21 	bl	8004d6c <_free_r>
 800492a:	2300      	movs	r3, #0
 800492c:	6363      	str	r3, [r4, #52]	; 0x34
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004934:	81a3      	strh	r3, [r4, #12]
 8004936:	2300      	movs	r3, #0
 8004938:	6063      	str	r3, [r4, #4]
 800493a:	6923      	ldr	r3, [r4, #16]
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	f043 0308 	orr.w	r3, r3, #8
 8004944:	81a3      	strh	r3, [r4, #12]
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	b94b      	cbnz	r3, 800495e <__swsetup_r+0x9a>
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004954:	d003      	beq.n	800495e <__swsetup_r+0x9a>
 8004956:	4621      	mov	r1, r4
 8004958:	4630      	mov	r0, r6
 800495a:	f000 f9bf 	bl	8004cdc <__smakebuf_r>
 800495e:	89a2      	ldrh	r2, [r4, #12]
 8004960:	f012 0301 	ands.w	r3, r2, #1
 8004964:	d00c      	beq.n	8004980 <__swsetup_r+0xbc>
 8004966:	2300      	movs	r3, #0
 8004968:	60a3      	str	r3, [r4, #8]
 800496a:	6963      	ldr	r3, [r4, #20]
 800496c:	425b      	negs	r3, r3
 800496e:	61a3      	str	r3, [r4, #24]
 8004970:	6923      	ldr	r3, [r4, #16]
 8004972:	b953      	cbnz	r3, 800498a <__swsetup_r+0xc6>
 8004974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004978:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800497c:	d1ba      	bne.n	80048f4 <__swsetup_r+0x30>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	0792      	lsls	r2, r2, #30
 8004982:	bf58      	it	pl
 8004984:	6963      	ldrpl	r3, [r4, #20]
 8004986:	60a3      	str	r3, [r4, #8]
 8004988:	e7f2      	b.n	8004970 <__swsetup_r+0xac>
 800498a:	2000      	movs	r0, #0
 800498c:	e7f7      	b.n	800497e <__swsetup_r+0xba>
 800498e:	bf00      	nop
 8004990:	2000000c 	.word	0x2000000c
 8004994:	08005b30 	.word	0x08005b30
 8004998:	08005b50 	.word	0x08005b50
 800499c:	08005b10 	.word	0x08005b10

080049a0 <__sflush_r>:
 80049a0:	898a      	ldrh	r2, [r1, #12]
 80049a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a6:	4605      	mov	r5, r0
 80049a8:	0710      	lsls	r0, r2, #28
 80049aa:	460c      	mov	r4, r1
 80049ac:	d458      	bmi.n	8004a60 <__sflush_r+0xc0>
 80049ae:	684b      	ldr	r3, [r1, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	dc05      	bgt.n	80049c0 <__sflush_r+0x20>
 80049b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	dc02      	bgt.n	80049c0 <__sflush_r+0x20>
 80049ba:	2000      	movs	r0, #0
 80049bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049c2:	2e00      	cmp	r6, #0
 80049c4:	d0f9      	beq.n	80049ba <__sflush_r+0x1a>
 80049c6:	2300      	movs	r3, #0
 80049c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049cc:	682f      	ldr	r7, [r5, #0]
 80049ce:	6a21      	ldr	r1, [r4, #32]
 80049d0:	602b      	str	r3, [r5, #0]
 80049d2:	d032      	beq.n	8004a3a <__sflush_r+0x9a>
 80049d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	075a      	lsls	r2, r3, #29
 80049da:	d505      	bpl.n	80049e8 <__sflush_r+0x48>
 80049dc:	6863      	ldr	r3, [r4, #4]
 80049de:	1ac0      	subs	r0, r0, r3
 80049e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049e2:	b10b      	cbz	r3, 80049e8 <__sflush_r+0x48>
 80049e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049e6:	1ac0      	subs	r0, r0, r3
 80049e8:	2300      	movs	r3, #0
 80049ea:	4602      	mov	r2, r0
 80049ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049ee:	6a21      	ldr	r1, [r4, #32]
 80049f0:	4628      	mov	r0, r5
 80049f2:	47b0      	blx	r6
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	d106      	bne.n	8004a08 <__sflush_r+0x68>
 80049fa:	6829      	ldr	r1, [r5, #0]
 80049fc:	291d      	cmp	r1, #29
 80049fe:	d848      	bhi.n	8004a92 <__sflush_r+0xf2>
 8004a00:	4a29      	ldr	r2, [pc, #164]	; (8004aa8 <__sflush_r+0x108>)
 8004a02:	40ca      	lsrs	r2, r1
 8004a04:	07d6      	lsls	r6, r2, #31
 8004a06:	d544      	bpl.n	8004a92 <__sflush_r+0xf2>
 8004a08:	2200      	movs	r2, #0
 8004a0a:	6062      	str	r2, [r4, #4]
 8004a0c:	04d9      	lsls	r1, r3, #19
 8004a0e:	6922      	ldr	r2, [r4, #16]
 8004a10:	6022      	str	r2, [r4, #0]
 8004a12:	d504      	bpl.n	8004a1e <__sflush_r+0x7e>
 8004a14:	1c42      	adds	r2, r0, #1
 8004a16:	d101      	bne.n	8004a1c <__sflush_r+0x7c>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b903      	cbnz	r3, 8004a1e <__sflush_r+0x7e>
 8004a1c:	6560      	str	r0, [r4, #84]	; 0x54
 8004a1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a20:	602f      	str	r7, [r5, #0]
 8004a22:	2900      	cmp	r1, #0
 8004a24:	d0c9      	beq.n	80049ba <__sflush_r+0x1a>
 8004a26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a2a:	4299      	cmp	r1, r3
 8004a2c:	d002      	beq.n	8004a34 <__sflush_r+0x94>
 8004a2e:	4628      	mov	r0, r5
 8004a30:	f000 f99c 	bl	8004d6c <_free_r>
 8004a34:	2000      	movs	r0, #0
 8004a36:	6360      	str	r0, [r4, #52]	; 0x34
 8004a38:	e7c0      	b.n	80049bc <__sflush_r+0x1c>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	47b0      	blx	r6
 8004a40:	1c41      	adds	r1, r0, #1
 8004a42:	d1c8      	bne.n	80049d6 <__sflush_r+0x36>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0c5      	beq.n	80049d6 <__sflush_r+0x36>
 8004a4a:	2b1d      	cmp	r3, #29
 8004a4c:	d001      	beq.n	8004a52 <__sflush_r+0xb2>
 8004a4e:	2b16      	cmp	r3, #22
 8004a50:	d101      	bne.n	8004a56 <__sflush_r+0xb6>
 8004a52:	602f      	str	r7, [r5, #0]
 8004a54:	e7b1      	b.n	80049ba <__sflush_r+0x1a>
 8004a56:	89a3      	ldrh	r3, [r4, #12]
 8004a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a5c:	81a3      	strh	r3, [r4, #12]
 8004a5e:	e7ad      	b.n	80049bc <__sflush_r+0x1c>
 8004a60:	690f      	ldr	r7, [r1, #16]
 8004a62:	2f00      	cmp	r7, #0
 8004a64:	d0a9      	beq.n	80049ba <__sflush_r+0x1a>
 8004a66:	0793      	lsls	r3, r2, #30
 8004a68:	680e      	ldr	r6, [r1, #0]
 8004a6a:	bf08      	it	eq
 8004a6c:	694b      	ldreq	r3, [r1, #20]
 8004a6e:	600f      	str	r7, [r1, #0]
 8004a70:	bf18      	it	ne
 8004a72:	2300      	movne	r3, #0
 8004a74:	eba6 0807 	sub.w	r8, r6, r7
 8004a78:	608b      	str	r3, [r1, #8]
 8004a7a:	f1b8 0f00 	cmp.w	r8, #0
 8004a7e:	dd9c      	ble.n	80049ba <__sflush_r+0x1a>
 8004a80:	4643      	mov	r3, r8
 8004a82:	463a      	mov	r2, r7
 8004a84:	6a21      	ldr	r1, [r4, #32]
 8004a86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a88:	4628      	mov	r0, r5
 8004a8a:	47b0      	blx	r6
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	dc06      	bgt.n	8004a9e <__sflush_r+0xfe>
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a96:	81a3      	strh	r3, [r4, #12]
 8004a98:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9c:	e78e      	b.n	80049bc <__sflush_r+0x1c>
 8004a9e:	4407      	add	r7, r0
 8004aa0:	eba8 0800 	sub.w	r8, r8, r0
 8004aa4:	e7e9      	b.n	8004a7a <__sflush_r+0xda>
 8004aa6:	bf00      	nop
 8004aa8:	20400001 	.word	0x20400001

08004aac <_fflush_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	690b      	ldr	r3, [r1, #16]
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	b1db      	cbz	r3, 8004aee <_fflush_r+0x42>
 8004ab6:	b118      	cbz	r0, 8004ac0 <_fflush_r+0x14>
 8004ab8:	6983      	ldr	r3, [r0, #24]
 8004aba:	b90b      	cbnz	r3, 8004ac0 <_fflush_r+0x14>
 8004abc:	f000 f860 	bl	8004b80 <__sinit>
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <_fflush_r+0x48>)
 8004ac2:	429c      	cmp	r4, r3
 8004ac4:	d109      	bne.n	8004ada <_fflush_r+0x2e>
 8004ac6:	686c      	ldr	r4, [r5, #4]
 8004ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004acc:	b17b      	cbz	r3, 8004aee <_fflush_r+0x42>
 8004ace:	4621      	mov	r1, r4
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ad6:	f7ff bf63 	b.w	80049a0 <__sflush_r>
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <_fflush_r+0x4c>)
 8004adc:	429c      	cmp	r4, r3
 8004ade:	d101      	bne.n	8004ae4 <_fflush_r+0x38>
 8004ae0:	68ac      	ldr	r4, [r5, #8]
 8004ae2:	e7f1      	b.n	8004ac8 <_fflush_r+0x1c>
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <_fflush_r+0x50>)
 8004ae6:	429c      	cmp	r4, r3
 8004ae8:	bf08      	it	eq
 8004aea:	68ec      	ldreq	r4, [r5, #12]
 8004aec:	e7ec      	b.n	8004ac8 <_fflush_r+0x1c>
 8004aee:	2000      	movs	r0, #0
 8004af0:	bd38      	pop	{r3, r4, r5, pc}
 8004af2:	bf00      	nop
 8004af4:	08005b30 	.word	0x08005b30
 8004af8:	08005b50 	.word	0x08005b50
 8004afc:	08005b10 	.word	0x08005b10

08004b00 <std>:
 8004b00:	2300      	movs	r3, #0
 8004b02:	b510      	push	{r4, lr}
 8004b04:	4604      	mov	r4, r0
 8004b06:	e9c0 3300 	strd	r3, r3, [r0]
 8004b0a:	6083      	str	r3, [r0, #8]
 8004b0c:	8181      	strh	r1, [r0, #12]
 8004b0e:	6643      	str	r3, [r0, #100]	; 0x64
 8004b10:	81c2      	strh	r2, [r0, #14]
 8004b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b16:	6183      	str	r3, [r0, #24]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	2208      	movs	r2, #8
 8004b1c:	305c      	adds	r0, #92	; 0x5c
 8004b1e:	f7ff fd4d 	bl	80045bc <memset>
 8004b22:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <std+0x38>)
 8004b24:	6263      	str	r3, [r4, #36]	; 0x24
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <std+0x3c>)
 8004b28:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <std+0x40>)
 8004b2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <std+0x44>)
 8004b30:	6224      	str	r4, [r4, #32]
 8004b32:	6323      	str	r3, [r4, #48]	; 0x30
 8004b34:	bd10      	pop	{r4, pc}
 8004b36:	bf00      	nop
 8004b38:	0800546d 	.word	0x0800546d
 8004b3c:	0800548f 	.word	0x0800548f
 8004b40:	080054c7 	.word	0x080054c7
 8004b44:	080054eb 	.word	0x080054eb

08004b48 <_cleanup_r>:
 8004b48:	4901      	ldr	r1, [pc, #4]	; (8004b50 <_cleanup_r+0x8>)
 8004b4a:	f000 b885 	b.w	8004c58 <_fwalk_reent>
 8004b4e:	bf00      	nop
 8004b50:	08004aad 	.word	0x08004aad

08004b54 <__sfmoreglue>:
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	1e4a      	subs	r2, r1, #1
 8004b58:	2568      	movs	r5, #104	; 0x68
 8004b5a:	4355      	muls	r5, r2
 8004b5c:	460e      	mov	r6, r1
 8004b5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b62:	f000 f951 	bl	8004e08 <_malloc_r>
 8004b66:	4604      	mov	r4, r0
 8004b68:	b140      	cbz	r0, 8004b7c <__sfmoreglue+0x28>
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	e9c0 1600 	strd	r1, r6, [r0]
 8004b70:	300c      	adds	r0, #12
 8004b72:	60a0      	str	r0, [r4, #8]
 8004b74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b78:	f7ff fd20 	bl	80045bc <memset>
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}

08004b80 <__sinit>:
 8004b80:	6983      	ldr	r3, [r0, #24]
 8004b82:	b510      	push	{r4, lr}
 8004b84:	4604      	mov	r4, r0
 8004b86:	bb33      	cbnz	r3, 8004bd6 <__sinit+0x56>
 8004b88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004b8c:	6503      	str	r3, [r0, #80]	; 0x50
 8004b8e:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <__sinit+0x58>)
 8004b90:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <__sinit+0x5c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6282      	str	r2, [r0, #40]	; 0x28
 8004b96:	4298      	cmp	r0, r3
 8004b98:	bf04      	itt	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	6183      	streq	r3, [r0, #24]
 8004b9e:	f000 f81f 	bl	8004be0 <__sfp>
 8004ba2:	6060      	str	r0, [r4, #4]
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f000 f81b 	bl	8004be0 <__sfp>
 8004baa:	60a0      	str	r0, [r4, #8]
 8004bac:	4620      	mov	r0, r4
 8004bae:	f000 f817 	bl	8004be0 <__sfp>
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	60e0      	str	r0, [r4, #12]
 8004bb6:	2104      	movs	r1, #4
 8004bb8:	6860      	ldr	r0, [r4, #4]
 8004bba:	f7ff ffa1 	bl	8004b00 <std>
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2109      	movs	r1, #9
 8004bc2:	68a0      	ldr	r0, [r4, #8]
 8004bc4:	f7ff ff9c 	bl	8004b00 <std>
 8004bc8:	2202      	movs	r2, #2
 8004bca:	2112      	movs	r1, #18
 8004bcc:	68e0      	ldr	r0, [r4, #12]
 8004bce:	f7ff ff97 	bl	8004b00 <std>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	61a3      	str	r3, [r4, #24]
 8004bd6:	bd10      	pop	{r4, pc}
 8004bd8:	08005b0c 	.word	0x08005b0c
 8004bdc:	08004b49 	.word	0x08004b49

08004be0 <__sfp>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	4b1b      	ldr	r3, [pc, #108]	; (8004c50 <__sfp+0x70>)
 8004be4:	681e      	ldr	r6, [r3, #0]
 8004be6:	69b3      	ldr	r3, [r6, #24]
 8004be8:	4607      	mov	r7, r0
 8004bea:	b913      	cbnz	r3, 8004bf2 <__sfp+0x12>
 8004bec:	4630      	mov	r0, r6
 8004bee:	f7ff ffc7 	bl	8004b80 <__sinit>
 8004bf2:	3648      	adds	r6, #72	; 0x48
 8004bf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	d503      	bpl.n	8004c04 <__sfp+0x24>
 8004bfc:	6833      	ldr	r3, [r6, #0]
 8004bfe:	b133      	cbz	r3, 8004c0e <__sfp+0x2e>
 8004c00:	6836      	ldr	r6, [r6, #0]
 8004c02:	e7f7      	b.n	8004bf4 <__sfp+0x14>
 8004c04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c08:	b16d      	cbz	r5, 8004c26 <__sfp+0x46>
 8004c0a:	3468      	adds	r4, #104	; 0x68
 8004c0c:	e7f4      	b.n	8004bf8 <__sfp+0x18>
 8004c0e:	2104      	movs	r1, #4
 8004c10:	4638      	mov	r0, r7
 8004c12:	f7ff ff9f 	bl	8004b54 <__sfmoreglue>
 8004c16:	6030      	str	r0, [r6, #0]
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	d1f1      	bne.n	8004c00 <__sfp+0x20>
 8004c1c:	230c      	movs	r3, #12
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4604      	mov	r4, r0
 8004c22:	4620      	mov	r0, r4
 8004c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c26:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <__sfp+0x74>)
 8004c28:	6665      	str	r5, [r4, #100]	; 0x64
 8004c2a:	e9c4 5500 	strd	r5, r5, [r4]
 8004c2e:	60a5      	str	r5, [r4, #8]
 8004c30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004c34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004c38:	2208      	movs	r2, #8
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c40:	f7ff fcbc 	bl	80045bc <memset>
 8004c44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c4c:	e7e9      	b.n	8004c22 <__sfp+0x42>
 8004c4e:	bf00      	nop
 8004c50:	08005b0c 	.word	0x08005b0c
 8004c54:	ffff0001 	.word	0xffff0001

08004c58 <_fwalk_reent>:
 8004c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c5c:	4680      	mov	r8, r0
 8004c5e:	4689      	mov	r9, r1
 8004c60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c64:	2600      	movs	r6, #0
 8004c66:	b914      	cbnz	r4, 8004c6e <_fwalk_reent+0x16>
 8004c68:	4630      	mov	r0, r6
 8004c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004c72:	3f01      	subs	r7, #1
 8004c74:	d501      	bpl.n	8004c7a <_fwalk_reent+0x22>
 8004c76:	6824      	ldr	r4, [r4, #0]
 8004c78:	e7f5      	b.n	8004c66 <_fwalk_reent+0xe>
 8004c7a:	89ab      	ldrh	r3, [r5, #12]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d907      	bls.n	8004c90 <_fwalk_reent+0x38>
 8004c80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c84:	3301      	adds	r3, #1
 8004c86:	d003      	beq.n	8004c90 <_fwalk_reent+0x38>
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	47c8      	blx	r9
 8004c8e:	4306      	orrs	r6, r0
 8004c90:	3568      	adds	r5, #104	; 0x68
 8004c92:	e7ee      	b.n	8004c72 <_fwalk_reent+0x1a>

08004c94 <__swhatbuf_r>:
 8004c94:	b570      	push	{r4, r5, r6, lr}
 8004c96:	460e      	mov	r6, r1
 8004c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c9c:	2900      	cmp	r1, #0
 8004c9e:	b096      	sub	sp, #88	; 0x58
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	461d      	mov	r5, r3
 8004ca4:	da07      	bge.n	8004cb6 <__swhatbuf_r+0x22>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	602b      	str	r3, [r5, #0]
 8004caa:	89b3      	ldrh	r3, [r6, #12]
 8004cac:	061a      	lsls	r2, r3, #24
 8004cae:	d410      	bmi.n	8004cd2 <__swhatbuf_r+0x3e>
 8004cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cb4:	e00e      	b.n	8004cd4 <__swhatbuf_r+0x40>
 8004cb6:	466a      	mov	r2, sp
 8004cb8:	f000 fc3e 	bl	8005538 <_fstat_r>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	dbf2      	blt.n	8004ca6 <__swhatbuf_r+0x12>
 8004cc0:	9a01      	ldr	r2, [sp, #4]
 8004cc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004cc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cca:	425a      	negs	r2, r3
 8004ccc:	415a      	adcs	r2, r3
 8004cce:	602a      	str	r2, [r5, #0]
 8004cd0:	e7ee      	b.n	8004cb0 <__swhatbuf_r+0x1c>
 8004cd2:	2340      	movs	r3, #64	; 0x40
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	b016      	add	sp, #88	; 0x58
 8004cda:	bd70      	pop	{r4, r5, r6, pc}

08004cdc <__smakebuf_r>:
 8004cdc:	898b      	ldrh	r3, [r1, #12]
 8004cde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ce0:	079d      	lsls	r5, r3, #30
 8004ce2:	4606      	mov	r6, r0
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	d507      	bpl.n	8004cf8 <__smakebuf_r+0x1c>
 8004ce8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cec:	6023      	str	r3, [r4, #0]
 8004cee:	6123      	str	r3, [r4, #16]
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	6163      	str	r3, [r4, #20]
 8004cf4:	b002      	add	sp, #8
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	ab01      	add	r3, sp, #4
 8004cfa:	466a      	mov	r2, sp
 8004cfc:	f7ff ffca 	bl	8004c94 <__swhatbuf_r>
 8004d00:	9900      	ldr	r1, [sp, #0]
 8004d02:	4605      	mov	r5, r0
 8004d04:	4630      	mov	r0, r6
 8004d06:	f000 f87f 	bl	8004e08 <_malloc_r>
 8004d0a:	b948      	cbnz	r0, 8004d20 <__smakebuf_r+0x44>
 8004d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d10:	059a      	lsls	r2, r3, #22
 8004d12:	d4ef      	bmi.n	8004cf4 <__smakebuf_r+0x18>
 8004d14:	f023 0303 	bic.w	r3, r3, #3
 8004d18:	f043 0302 	orr.w	r3, r3, #2
 8004d1c:	81a3      	strh	r3, [r4, #12]
 8004d1e:	e7e3      	b.n	8004ce8 <__smakebuf_r+0xc>
 8004d20:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <__smakebuf_r+0x7c>)
 8004d22:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	6020      	str	r0, [r4, #0]
 8004d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2c:	81a3      	strh	r3, [r4, #12]
 8004d2e:	9b00      	ldr	r3, [sp, #0]
 8004d30:	6163      	str	r3, [r4, #20]
 8004d32:	9b01      	ldr	r3, [sp, #4]
 8004d34:	6120      	str	r0, [r4, #16]
 8004d36:	b15b      	cbz	r3, 8004d50 <__smakebuf_r+0x74>
 8004d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	f000 fc0d 	bl	800555c <_isatty_r>
 8004d42:	b128      	cbz	r0, 8004d50 <__smakebuf_r+0x74>
 8004d44:	89a3      	ldrh	r3, [r4, #12]
 8004d46:	f023 0303 	bic.w	r3, r3, #3
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	81a3      	strh	r3, [r4, #12]
 8004d50:	89a3      	ldrh	r3, [r4, #12]
 8004d52:	431d      	orrs	r5, r3
 8004d54:	81a5      	strh	r5, [r4, #12]
 8004d56:	e7cd      	b.n	8004cf4 <__smakebuf_r+0x18>
 8004d58:	08004b49 	.word	0x08004b49

08004d5c <malloc>:
 8004d5c:	4b02      	ldr	r3, [pc, #8]	; (8004d68 <malloc+0xc>)
 8004d5e:	4601      	mov	r1, r0
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	f000 b851 	b.w	8004e08 <_malloc_r>
 8004d66:	bf00      	nop
 8004d68:	2000000c 	.word	0x2000000c

08004d6c <_free_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4605      	mov	r5, r0
 8004d70:	2900      	cmp	r1, #0
 8004d72:	d045      	beq.n	8004e00 <_free_r+0x94>
 8004d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d78:	1f0c      	subs	r4, r1, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bfb8      	it	lt
 8004d7e:	18e4      	addlt	r4, r4, r3
 8004d80:	f000 fc0e 	bl	80055a0 <__malloc_lock>
 8004d84:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <_free_r+0x98>)
 8004d86:	6813      	ldr	r3, [r2, #0]
 8004d88:	4610      	mov	r0, r2
 8004d8a:	b933      	cbnz	r3, 8004d9a <_free_r+0x2e>
 8004d8c:	6063      	str	r3, [r4, #4]
 8004d8e:	6014      	str	r4, [r2, #0]
 8004d90:	4628      	mov	r0, r5
 8004d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d96:	f000 bc04 	b.w	80055a2 <__malloc_unlock>
 8004d9a:	42a3      	cmp	r3, r4
 8004d9c:	d90c      	bls.n	8004db8 <_free_r+0x4c>
 8004d9e:	6821      	ldr	r1, [r4, #0]
 8004da0:	1862      	adds	r2, r4, r1
 8004da2:	4293      	cmp	r3, r2
 8004da4:	bf04      	itt	eq
 8004da6:	681a      	ldreq	r2, [r3, #0]
 8004da8:	685b      	ldreq	r3, [r3, #4]
 8004daa:	6063      	str	r3, [r4, #4]
 8004dac:	bf04      	itt	eq
 8004dae:	1852      	addeq	r2, r2, r1
 8004db0:	6022      	streq	r2, [r4, #0]
 8004db2:	6004      	str	r4, [r0, #0]
 8004db4:	e7ec      	b.n	8004d90 <_free_r+0x24>
 8004db6:	4613      	mov	r3, r2
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	b10a      	cbz	r2, 8004dc0 <_free_r+0x54>
 8004dbc:	42a2      	cmp	r2, r4
 8004dbe:	d9fa      	bls.n	8004db6 <_free_r+0x4a>
 8004dc0:	6819      	ldr	r1, [r3, #0]
 8004dc2:	1858      	adds	r0, r3, r1
 8004dc4:	42a0      	cmp	r0, r4
 8004dc6:	d10b      	bne.n	8004de0 <_free_r+0x74>
 8004dc8:	6820      	ldr	r0, [r4, #0]
 8004dca:	4401      	add	r1, r0
 8004dcc:	1858      	adds	r0, r3, r1
 8004dce:	4282      	cmp	r2, r0
 8004dd0:	6019      	str	r1, [r3, #0]
 8004dd2:	d1dd      	bne.n	8004d90 <_free_r+0x24>
 8004dd4:	6810      	ldr	r0, [r2, #0]
 8004dd6:	6852      	ldr	r2, [r2, #4]
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	4401      	add	r1, r0
 8004ddc:	6019      	str	r1, [r3, #0]
 8004dde:	e7d7      	b.n	8004d90 <_free_r+0x24>
 8004de0:	d902      	bls.n	8004de8 <_free_r+0x7c>
 8004de2:	230c      	movs	r3, #12
 8004de4:	602b      	str	r3, [r5, #0]
 8004de6:	e7d3      	b.n	8004d90 <_free_r+0x24>
 8004de8:	6820      	ldr	r0, [r4, #0]
 8004dea:	1821      	adds	r1, r4, r0
 8004dec:	428a      	cmp	r2, r1
 8004dee:	bf04      	itt	eq
 8004df0:	6811      	ldreq	r1, [r2, #0]
 8004df2:	6852      	ldreq	r2, [r2, #4]
 8004df4:	6062      	str	r2, [r4, #4]
 8004df6:	bf04      	itt	eq
 8004df8:	1809      	addeq	r1, r1, r0
 8004dfa:	6021      	streq	r1, [r4, #0]
 8004dfc:	605c      	str	r4, [r3, #4]
 8004dfe:	e7c7      	b.n	8004d90 <_free_r+0x24>
 8004e00:	bd38      	pop	{r3, r4, r5, pc}
 8004e02:	bf00      	nop
 8004e04:	20000108 	.word	0x20000108

08004e08 <_malloc_r>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	1ccd      	adds	r5, r1, #3
 8004e0c:	f025 0503 	bic.w	r5, r5, #3
 8004e10:	3508      	adds	r5, #8
 8004e12:	2d0c      	cmp	r5, #12
 8004e14:	bf38      	it	cc
 8004e16:	250c      	movcc	r5, #12
 8004e18:	2d00      	cmp	r5, #0
 8004e1a:	4606      	mov	r6, r0
 8004e1c:	db01      	blt.n	8004e22 <_malloc_r+0x1a>
 8004e1e:	42a9      	cmp	r1, r5
 8004e20:	d903      	bls.n	8004e2a <_malloc_r+0x22>
 8004e22:	230c      	movs	r3, #12
 8004e24:	6033      	str	r3, [r6, #0]
 8004e26:	2000      	movs	r0, #0
 8004e28:	bd70      	pop	{r4, r5, r6, pc}
 8004e2a:	f000 fbb9 	bl	80055a0 <__malloc_lock>
 8004e2e:	4a21      	ldr	r2, [pc, #132]	; (8004eb4 <_malloc_r+0xac>)
 8004e30:	6814      	ldr	r4, [r2, #0]
 8004e32:	4621      	mov	r1, r4
 8004e34:	b991      	cbnz	r1, 8004e5c <_malloc_r+0x54>
 8004e36:	4c20      	ldr	r4, [pc, #128]	; (8004eb8 <_malloc_r+0xb0>)
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	b91b      	cbnz	r3, 8004e44 <_malloc_r+0x3c>
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	f000 fb05 	bl	800544c <_sbrk_r>
 8004e42:	6020      	str	r0, [r4, #0]
 8004e44:	4629      	mov	r1, r5
 8004e46:	4630      	mov	r0, r6
 8004e48:	f000 fb00 	bl	800544c <_sbrk_r>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d124      	bne.n	8004e9a <_malloc_r+0x92>
 8004e50:	230c      	movs	r3, #12
 8004e52:	6033      	str	r3, [r6, #0]
 8004e54:	4630      	mov	r0, r6
 8004e56:	f000 fba4 	bl	80055a2 <__malloc_unlock>
 8004e5a:	e7e4      	b.n	8004e26 <_malloc_r+0x1e>
 8004e5c:	680b      	ldr	r3, [r1, #0]
 8004e5e:	1b5b      	subs	r3, r3, r5
 8004e60:	d418      	bmi.n	8004e94 <_malloc_r+0x8c>
 8004e62:	2b0b      	cmp	r3, #11
 8004e64:	d90f      	bls.n	8004e86 <_malloc_r+0x7e>
 8004e66:	600b      	str	r3, [r1, #0]
 8004e68:	50cd      	str	r5, [r1, r3]
 8004e6a:	18cc      	adds	r4, r1, r3
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	f000 fb98 	bl	80055a2 <__malloc_unlock>
 8004e72:	f104 000b 	add.w	r0, r4, #11
 8004e76:	1d23      	adds	r3, r4, #4
 8004e78:	f020 0007 	bic.w	r0, r0, #7
 8004e7c:	1ac3      	subs	r3, r0, r3
 8004e7e:	d0d3      	beq.n	8004e28 <_malloc_r+0x20>
 8004e80:	425a      	negs	r2, r3
 8004e82:	50e2      	str	r2, [r4, r3]
 8004e84:	e7d0      	b.n	8004e28 <_malloc_r+0x20>
 8004e86:	428c      	cmp	r4, r1
 8004e88:	684b      	ldr	r3, [r1, #4]
 8004e8a:	bf16      	itet	ne
 8004e8c:	6063      	strne	r3, [r4, #4]
 8004e8e:	6013      	streq	r3, [r2, #0]
 8004e90:	460c      	movne	r4, r1
 8004e92:	e7eb      	b.n	8004e6c <_malloc_r+0x64>
 8004e94:	460c      	mov	r4, r1
 8004e96:	6849      	ldr	r1, [r1, #4]
 8004e98:	e7cc      	b.n	8004e34 <_malloc_r+0x2c>
 8004e9a:	1cc4      	adds	r4, r0, #3
 8004e9c:	f024 0403 	bic.w	r4, r4, #3
 8004ea0:	42a0      	cmp	r0, r4
 8004ea2:	d005      	beq.n	8004eb0 <_malloc_r+0xa8>
 8004ea4:	1a21      	subs	r1, r4, r0
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	f000 fad0 	bl	800544c <_sbrk_r>
 8004eac:	3001      	adds	r0, #1
 8004eae:	d0cf      	beq.n	8004e50 <_malloc_r+0x48>
 8004eb0:	6025      	str	r5, [r4, #0]
 8004eb2:	e7db      	b.n	8004e6c <_malloc_r+0x64>
 8004eb4:	20000108 	.word	0x20000108
 8004eb8:	2000010c 	.word	0x2000010c

08004ebc <__sfputc_r>:
 8004ebc:	6893      	ldr	r3, [r2, #8]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	b410      	push	{r4}
 8004ec4:	6093      	str	r3, [r2, #8]
 8004ec6:	da08      	bge.n	8004eda <__sfputc_r+0x1e>
 8004ec8:	6994      	ldr	r4, [r2, #24]
 8004eca:	42a3      	cmp	r3, r4
 8004ecc:	db01      	blt.n	8004ed2 <__sfputc_r+0x16>
 8004ece:	290a      	cmp	r1, #10
 8004ed0:	d103      	bne.n	8004eda <__sfputc_r+0x1e>
 8004ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ed6:	f7ff bca3 	b.w	8004820 <__swbuf_r>
 8004eda:	6813      	ldr	r3, [r2, #0]
 8004edc:	1c58      	adds	r0, r3, #1
 8004ede:	6010      	str	r0, [r2, #0]
 8004ee0:	7019      	strb	r1, [r3, #0]
 8004ee2:	4608      	mov	r0, r1
 8004ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <__sfputs_r>:
 8004eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eec:	4606      	mov	r6, r0
 8004eee:	460f      	mov	r7, r1
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	18d5      	adds	r5, r2, r3
 8004ef4:	42ac      	cmp	r4, r5
 8004ef6:	d101      	bne.n	8004efc <__sfputs_r+0x12>
 8004ef8:	2000      	movs	r0, #0
 8004efa:	e007      	b.n	8004f0c <__sfputs_r+0x22>
 8004efc:	463a      	mov	r2, r7
 8004efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f02:	4630      	mov	r0, r6
 8004f04:	f7ff ffda 	bl	8004ebc <__sfputc_r>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d1f3      	bne.n	8004ef4 <__sfputs_r+0xa>
 8004f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f10 <_vfiprintf_r>:
 8004f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	460c      	mov	r4, r1
 8004f16:	b09d      	sub	sp, #116	; 0x74
 8004f18:	4617      	mov	r7, r2
 8004f1a:	461d      	mov	r5, r3
 8004f1c:	4606      	mov	r6, r0
 8004f1e:	b118      	cbz	r0, 8004f28 <_vfiprintf_r+0x18>
 8004f20:	6983      	ldr	r3, [r0, #24]
 8004f22:	b90b      	cbnz	r3, 8004f28 <_vfiprintf_r+0x18>
 8004f24:	f7ff fe2c 	bl	8004b80 <__sinit>
 8004f28:	4b7c      	ldr	r3, [pc, #496]	; (800511c <_vfiprintf_r+0x20c>)
 8004f2a:	429c      	cmp	r4, r3
 8004f2c:	d158      	bne.n	8004fe0 <_vfiprintf_r+0xd0>
 8004f2e:	6874      	ldr	r4, [r6, #4]
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	0718      	lsls	r0, r3, #28
 8004f34:	d55e      	bpl.n	8004ff4 <_vfiprintf_r+0xe4>
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d05b      	beq.n	8004ff4 <_vfiprintf_r+0xe4>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f40:	2320      	movs	r3, #32
 8004f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f46:	2330      	movs	r3, #48	; 0x30
 8004f48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f4c:	9503      	str	r5, [sp, #12]
 8004f4e:	f04f 0b01 	mov.w	fp, #1
 8004f52:	46b8      	mov	r8, r7
 8004f54:	4645      	mov	r5, r8
 8004f56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f5a:	b10b      	cbz	r3, 8004f60 <_vfiprintf_r+0x50>
 8004f5c:	2b25      	cmp	r3, #37	; 0x25
 8004f5e:	d154      	bne.n	800500a <_vfiprintf_r+0xfa>
 8004f60:	ebb8 0a07 	subs.w	sl, r8, r7
 8004f64:	d00b      	beq.n	8004f7e <_vfiprintf_r+0x6e>
 8004f66:	4653      	mov	r3, sl
 8004f68:	463a      	mov	r2, r7
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f7ff ffbc 	bl	8004eea <__sfputs_r>
 8004f72:	3001      	adds	r0, #1
 8004f74:	f000 80c2 	beq.w	80050fc <_vfiprintf_r+0x1ec>
 8004f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7a:	4453      	add	r3, sl
 8004f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f7e:	f898 3000 	ldrb.w	r3, [r8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 80ba 	beq.w	80050fc <_vfiprintf_r+0x1ec>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f92:	9304      	str	r3, [sp, #16]
 8004f94:	9307      	str	r3, [sp, #28]
 8004f96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f9a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f9c:	46a8      	mov	r8, r5
 8004f9e:	2205      	movs	r2, #5
 8004fa0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004fa4:	485e      	ldr	r0, [pc, #376]	; (8005120 <_vfiprintf_r+0x210>)
 8004fa6:	f7fb f95b 	bl	8000260 <memchr>
 8004faa:	9b04      	ldr	r3, [sp, #16]
 8004fac:	bb78      	cbnz	r0, 800500e <_vfiprintf_r+0xfe>
 8004fae:	06d9      	lsls	r1, r3, #27
 8004fb0:	bf44      	itt	mi
 8004fb2:	2220      	movmi	r2, #32
 8004fb4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fb8:	071a      	lsls	r2, r3, #28
 8004fba:	bf44      	itt	mi
 8004fbc:	222b      	movmi	r2, #43	; 0x2b
 8004fbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fc2:	782a      	ldrb	r2, [r5, #0]
 8004fc4:	2a2a      	cmp	r2, #42	; 0x2a
 8004fc6:	d02a      	beq.n	800501e <_vfiprintf_r+0x10e>
 8004fc8:	9a07      	ldr	r2, [sp, #28]
 8004fca:	46a8      	mov	r8, r5
 8004fcc:	2000      	movs	r0, #0
 8004fce:	250a      	movs	r5, #10
 8004fd0:	4641      	mov	r1, r8
 8004fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fd6:	3b30      	subs	r3, #48	; 0x30
 8004fd8:	2b09      	cmp	r3, #9
 8004fda:	d969      	bls.n	80050b0 <_vfiprintf_r+0x1a0>
 8004fdc:	b360      	cbz	r0, 8005038 <_vfiprintf_r+0x128>
 8004fde:	e024      	b.n	800502a <_vfiprintf_r+0x11a>
 8004fe0:	4b50      	ldr	r3, [pc, #320]	; (8005124 <_vfiprintf_r+0x214>)
 8004fe2:	429c      	cmp	r4, r3
 8004fe4:	d101      	bne.n	8004fea <_vfiprintf_r+0xda>
 8004fe6:	68b4      	ldr	r4, [r6, #8]
 8004fe8:	e7a2      	b.n	8004f30 <_vfiprintf_r+0x20>
 8004fea:	4b4f      	ldr	r3, [pc, #316]	; (8005128 <_vfiprintf_r+0x218>)
 8004fec:	429c      	cmp	r4, r3
 8004fee:	bf08      	it	eq
 8004ff0:	68f4      	ldreq	r4, [r6, #12]
 8004ff2:	e79d      	b.n	8004f30 <_vfiprintf_r+0x20>
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f7ff fc64 	bl	80048c4 <__swsetup_r>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d09d      	beq.n	8004f3c <_vfiprintf_r+0x2c>
 8005000:	f04f 30ff 	mov.w	r0, #4294967295
 8005004:	b01d      	add	sp, #116	; 0x74
 8005006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800500a:	46a8      	mov	r8, r5
 800500c:	e7a2      	b.n	8004f54 <_vfiprintf_r+0x44>
 800500e:	4a44      	ldr	r2, [pc, #272]	; (8005120 <_vfiprintf_r+0x210>)
 8005010:	1a80      	subs	r0, r0, r2
 8005012:	fa0b f000 	lsl.w	r0, fp, r0
 8005016:	4318      	orrs	r0, r3
 8005018:	9004      	str	r0, [sp, #16]
 800501a:	4645      	mov	r5, r8
 800501c:	e7be      	b.n	8004f9c <_vfiprintf_r+0x8c>
 800501e:	9a03      	ldr	r2, [sp, #12]
 8005020:	1d11      	adds	r1, r2, #4
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	9103      	str	r1, [sp, #12]
 8005026:	2a00      	cmp	r2, #0
 8005028:	db01      	blt.n	800502e <_vfiprintf_r+0x11e>
 800502a:	9207      	str	r2, [sp, #28]
 800502c:	e004      	b.n	8005038 <_vfiprintf_r+0x128>
 800502e:	4252      	negs	r2, r2
 8005030:	f043 0302 	orr.w	r3, r3, #2
 8005034:	9207      	str	r2, [sp, #28]
 8005036:	9304      	str	r3, [sp, #16]
 8005038:	f898 3000 	ldrb.w	r3, [r8]
 800503c:	2b2e      	cmp	r3, #46	; 0x2e
 800503e:	d10e      	bne.n	800505e <_vfiprintf_r+0x14e>
 8005040:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005044:	2b2a      	cmp	r3, #42	; 0x2a
 8005046:	d138      	bne.n	80050ba <_vfiprintf_r+0x1aa>
 8005048:	9b03      	ldr	r3, [sp, #12]
 800504a:	1d1a      	adds	r2, r3, #4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	9203      	str	r2, [sp, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	bfb8      	it	lt
 8005054:	f04f 33ff 	movlt.w	r3, #4294967295
 8005058:	f108 0802 	add.w	r8, r8, #2
 800505c:	9305      	str	r3, [sp, #20]
 800505e:	4d33      	ldr	r5, [pc, #204]	; (800512c <_vfiprintf_r+0x21c>)
 8005060:	f898 1000 	ldrb.w	r1, [r8]
 8005064:	2203      	movs	r2, #3
 8005066:	4628      	mov	r0, r5
 8005068:	f7fb f8fa 	bl	8000260 <memchr>
 800506c:	b140      	cbz	r0, 8005080 <_vfiprintf_r+0x170>
 800506e:	2340      	movs	r3, #64	; 0x40
 8005070:	1b40      	subs	r0, r0, r5
 8005072:	fa03 f000 	lsl.w	r0, r3, r0
 8005076:	9b04      	ldr	r3, [sp, #16]
 8005078:	4303      	orrs	r3, r0
 800507a:	f108 0801 	add.w	r8, r8, #1
 800507e:	9304      	str	r3, [sp, #16]
 8005080:	f898 1000 	ldrb.w	r1, [r8]
 8005084:	482a      	ldr	r0, [pc, #168]	; (8005130 <_vfiprintf_r+0x220>)
 8005086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800508a:	2206      	movs	r2, #6
 800508c:	f108 0701 	add.w	r7, r8, #1
 8005090:	f7fb f8e6 	bl	8000260 <memchr>
 8005094:	2800      	cmp	r0, #0
 8005096:	d037      	beq.n	8005108 <_vfiprintf_r+0x1f8>
 8005098:	4b26      	ldr	r3, [pc, #152]	; (8005134 <_vfiprintf_r+0x224>)
 800509a:	bb1b      	cbnz	r3, 80050e4 <_vfiprintf_r+0x1d4>
 800509c:	9b03      	ldr	r3, [sp, #12]
 800509e:	3307      	adds	r3, #7
 80050a0:	f023 0307 	bic.w	r3, r3, #7
 80050a4:	3308      	adds	r3, #8
 80050a6:	9303      	str	r3, [sp, #12]
 80050a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050aa:	444b      	add	r3, r9
 80050ac:	9309      	str	r3, [sp, #36]	; 0x24
 80050ae:	e750      	b.n	8004f52 <_vfiprintf_r+0x42>
 80050b0:	fb05 3202 	mla	r2, r5, r2, r3
 80050b4:	2001      	movs	r0, #1
 80050b6:	4688      	mov	r8, r1
 80050b8:	e78a      	b.n	8004fd0 <_vfiprintf_r+0xc0>
 80050ba:	2300      	movs	r3, #0
 80050bc:	f108 0801 	add.w	r8, r8, #1
 80050c0:	9305      	str	r3, [sp, #20]
 80050c2:	4619      	mov	r1, r3
 80050c4:	250a      	movs	r5, #10
 80050c6:	4640      	mov	r0, r8
 80050c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050cc:	3a30      	subs	r2, #48	; 0x30
 80050ce:	2a09      	cmp	r2, #9
 80050d0:	d903      	bls.n	80050da <_vfiprintf_r+0x1ca>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0c3      	beq.n	800505e <_vfiprintf_r+0x14e>
 80050d6:	9105      	str	r1, [sp, #20]
 80050d8:	e7c1      	b.n	800505e <_vfiprintf_r+0x14e>
 80050da:	fb05 2101 	mla	r1, r5, r1, r2
 80050de:	2301      	movs	r3, #1
 80050e0:	4680      	mov	r8, r0
 80050e2:	e7f0      	b.n	80050c6 <_vfiprintf_r+0x1b6>
 80050e4:	ab03      	add	r3, sp, #12
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	4622      	mov	r2, r4
 80050ea:	4b13      	ldr	r3, [pc, #76]	; (8005138 <_vfiprintf_r+0x228>)
 80050ec:	a904      	add	r1, sp, #16
 80050ee:	4630      	mov	r0, r6
 80050f0:	f3af 8000 	nop.w
 80050f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80050f8:	4681      	mov	r9, r0
 80050fa:	d1d5      	bne.n	80050a8 <_vfiprintf_r+0x198>
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	065b      	lsls	r3, r3, #25
 8005100:	f53f af7e 	bmi.w	8005000 <_vfiprintf_r+0xf0>
 8005104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005106:	e77d      	b.n	8005004 <_vfiprintf_r+0xf4>
 8005108:	ab03      	add	r3, sp, #12
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	4622      	mov	r2, r4
 800510e:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <_vfiprintf_r+0x228>)
 8005110:	a904      	add	r1, sp, #16
 8005112:	4630      	mov	r0, r6
 8005114:	f000 f888 	bl	8005228 <_printf_i>
 8005118:	e7ec      	b.n	80050f4 <_vfiprintf_r+0x1e4>
 800511a:	bf00      	nop
 800511c:	08005b30 	.word	0x08005b30
 8005120:	08005b70 	.word	0x08005b70
 8005124:	08005b50 	.word	0x08005b50
 8005128:	08005b10 	.word	0x08005b10
 800512c:	08005b76 	.word	0x08005b76
 8005130:	08005b7a 	.word	0x08005b7a
 8005134:	00000000 	.word	0x00000000
 8005138:	08004eeb 	.word	0x08004eeb

0800513c <_printf_common>:
 800513c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005140:	4691      	mov	r9, r2
 8005142:	461f      	mov	r7, r3
 8005144:	688a      	ldr	r2, [r1, #8]
 8005146:	690b      	ldr	r3, [r1, #16]
 8005148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800514c:	4293      	cmp	r3, r2
 800514e:	bfb8      	it	lt
 8005150:	4613      	movlt	r3, r2
 8005152:	f8c9 3000 	str.w	r3, [r9]
 8005156:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800515a:	4606      	mov	r6, r0
 800515c:	460c      	mov	r4, r1
 800515e:	b112      	cbz	r2, 8005166 <_printf_common+0x2a>
 8005160:	3301      	adds	r3, #1
 8005162:	f8c9 3000 	str.w	r3, [r9]
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	0699      	lsls	r1, r3, #26
 800516a:	bf42      	ittt	mi
 800516c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005170:	3302      	addmi	r3, #2
 8005172:	f8c9 3000 	strmi.w	r3, [r9]
 8005176:	6825      	ldr	r5, [r4, #0]
 8005178:	f015 0506 	ands.w	r5, r5, #6
 800517c:	d107      	bne.n	800518e <_printf_common+0x52>
 800517e:	f104 0a19 	add.w	sl, r4, #25
 8005182:	68e3      	ldr	r3, [r4, #12]
 8005184:	f8d9 2000 	ldr.w	r2, [r9]
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	42ab      	cmp	r3, r5
 800518c:	dc28      	bgt.n	80051e0 <_printf_common+0xa4>
 800518e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005192:	6822      	ldr	r2, [r4, #0]
 8005194:	3300      	adds	r3, #0
 8005196:	bf18      	it	ne
 8005198:	2301      	movne	r3, #1
 800519a:	0692      	lsls	r2, r2, #26
 800519c:	d42d      	bmi.n	80051fa <_printf_common+0xbe>
 800519e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051a2:	4639      	mov	r1, r7
 80051a4:	4630      	mov	r0, r6
 80051a6:	47c0      	blx	r8
 80051a8:	3001      	adds	r0, #1
 80051aa:	d020      	beq.n	80051ee <_printf_common+0xb2>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	68e5      	ldr	r5, [r4, #12]
 80051b0:	f8d9 2000 	ldr.w	r2, [r9]
 80051b4:	f003 0306 	and.w	r3, r3, #6
 80051b8:	2b04      	cmp	r3, #4
 80051ba:	bf08      	it	eq
 80051bc:	1aad      	subeq	r5, r5, r2
 80051be:	68a3      	ldr	r3, [r4, #8]
 80051c0:	6922      	ldr	r2, [r4, #16]
 80051c2:	bf0c      	ite	eq
 80051c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051c8:	2500      	movne	r5, #0
 80051ca:	4293      	cmp	r3, r2
 80051cc:	bfc4      	itt	gt
 80051ce:	1a9b      	subgt	r3, r3, r2
 80051d0:	18ed      	addgt	r5, r5, r3
 80051d2:	f04f 0900 	mov.w	r9, #0
 80051d6:	341a      	adds	r4, #26
 80051d8:	454d      	cmp	r5, r9
 80051da:	d11a      	bne.n	8005212 <_printf_common+0xd6>
 80051dc:	2000      	movs	r0, #0
 80051de:	e008      	b.n	80051f2 <_printf_common+0xb6>
 80051e0:	2301      	movs	r3, #1
 80051e2:	4652      	mov	r2, sl
 80051e4:	4639      	mov	r1, r7
 80051e6:	4630      	mov	r0, r6
 80051e8:	47c0      	blx	r8
 80051ea:	3001      	adds	r0, #1
 80051ec:	d103      	bne.n	80051f6 <_printf_common+0xba>
 80051ee:	f04f 30ff 	mov.w	r0, #4294967295
 80051f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f6:	3501      	adds	r5, #1
 80051f8:	e7c3      	b.n	8005182 <_printf_common+0x46>
 80051fa:	18e1      	adds	r1, r4, r3
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	2030      	movs	r0, #48	; 0x30
 8005200:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005204:	4422      	add	r2, r4
 8005206:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800520a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800520e:	3302      	adds	r3, #2
 8005210:	e7c5      	b.n	800519e <_printf_common+0x62>
 8005212:	2301      	movs	r3, #1
 8005214:	4622      	mov	r2, r4
 8005216:	4639      	mov	r1, r7
 8005218:	4630      	mov	r0, r6
 800521a:	47c0      	blx	r8
 800521c:	3001      	adds	r0, #1
 800521e:	d0e6      	beq.n	80051ee <_printf_common+0xb2>
 8005220:	f109 0901 	add.w	r9, r9, #1
 8005224:	e7d8      	b.n	80051d8 <_printf_common+0x9c>
	...

08005228 <_printf_i>:
 8005228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800522c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005230:	460c      	mov	r4, r1
 8005232:	7e09      	ldrb	r1, [r1, #24]
 8005234:	b085      	sub	sp, #20
 8005236:	296e      	cmp	r1, #110	; 0x6e
 8005238:	4617      	mov	r7, r2
 800523a:	4606      	mov	r6, r0
 800523c:	4698      	mov	r8, r3
 800523e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005240:	f000 80b3 	beq.w	80053aa <_printf_i+0x182>
 8005244:	d822      	bhi.n	800528c <_printf_i+0x64>
 8005246:	2963      	cmp	r1, #99	; 0x63
 8005248:	d036      	beq.n	80052b8 <_printf_i+0x90>
 800524a:	d80a      	bhi.n	8005262 <_printf_i+0x3a>
 800524c:	2900      	cmp	r1, #0
 800524e:	f000 80b9 	beq.w	80053c4 <_printf_i+0x19c>
 8005252:	2958      	cmp	r1, #88	; 0x58
 8005254:	f000 8083 	beq.w	800535e <_printf_i+0x136>
 8005258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800525c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005260:	e032      	b.n	80052c8 <_printf_i+0xa0>
 8005262:	2964      	cmp	r1, #100	; 0x64
 8005264:	d001      	beq.n	800526a <_printf_i+0x42>
 8005266:	2969      	cmp	r1, #105	; 0x69
 8005268:	d1f6      	bne.n	8005258 <_printf_i+0x30>
 800526a:	6820      	ldr	r0, [r4, #0]
 800526c:	6813      	ldr	r3, [r2, #0]
 800526e:	0605      	lsls	r5, r0, #24
 8005270:	f103 0104 	add.w	r1, r3, #4
 8005274:	d52a      	bpl.n	80052cc <_printf_i+0xa4>
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6011      	str	r1, [r2, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	da03      	bge.n	8005286 <_printf_i+0x5e>
 800527e:	222d      	movs	r2, #45	; 0x2d
 8005280:	425b      	negs	r3, r3
 8005282:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005286:	486f      	ldr	r0, [pc, #444]	; (8005444 <_printf_i+0x21c>)
 8005288:	220a      	movs	r2, #10
 800528a:	e039      	b.n	8005300 <_printf_i+0xd8>
 800528c:	2973      	cmp	r1, #115	; 0x73
 800528e:	f000 809d 	beq.w	80053cc <_printf_i+0x1a4>
 8005292:	d808      	bhi.n	80052a6 <_printf_i+0x7e>
 8005294:	296f      	cmp	r1, #111	; 0x6f
 8005296:	d020      	beq.n	80052da <_printf_i+0xb2>
 8005298:	2970      	cmp	r1, #112	; 0x70
 800529a:	d1dd      	bne.n	8005258 <_printf_i+0x30>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	f043 0320 	orr.w	r3, r3, #32
 80052a2:	6023      	str	r3, [r4, #0]
 80052a4:	e003      	b.n	80052ae <_printf_i+0x86>
 80052a6:	2975      	cmp	r1, #117	; 0x75
 80052a8:	d017      	beq.n	80052da <_printf_i+0xb2>
 80052aa:	2978      	cmp	r1, #120	; 0x78
 80052ac:	d1d4      	bne.n	8005258 <_printf_i+0x30>
 80052ae:	2378      	movs	r3, #120	; 0x78
 80052b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052b4:	4864      	ldr	r0, [pc, #400]	; (8005448 <_printf_i+0x220>)
 80052b6:	e055      	b.n	8005364 <_printf_i+0x13c>
 80052b8:	6813      	ldr	r3, [r2, #0]
 80052ba:	1d19      	adds	r1, r3, #4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6011      	str	r1, [r2, #0]
 80052c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052c8:	2301      	movs	r3, #1
 80052ca:	e08c      	b.n	80053e6 <_printf_i+0x1be>
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6011      	str	r1, [r2, #0]
 80052d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052d4:	bf18      	it	ne
 80052d6:	b21b      	sxthne	r3, r3
 80052d8:	e7cf      	b.n	800527a <_printf_i+0x52>
 80052da:	6813      	ldr	r3, [r2, #0]
 80052dc:	6825      	ldr	r5, [r4, #0]
 80052de:	1d18      	adds	r0, r3, #4
 80052e0:	6010      	str	r0, [r2, #0]
 80052e2:	0628      	lsls	r0, r5, #24
 80052e4:	d501      	bpl.n	80052ea <_printf_i+0xc2>
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	e002      	b.n	80052f0 <_printf_i+0xc8>
 80052ea:	0668      	lsls	r0, r5, #25
 80052ec:	d5fb      	bpl.n	80052e6 <_printf_i+0xbe>
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	4854      	ldr	r0, [pc, #336]	; (8005444 <_printf_i+0x21c>)
 80052f2:	296f      	cmp	r1, #111	; 0x6f
 80052f4:	bf14      	ite	ne
 80052f6:	220a      	movne	r2, #10
 80052f8:	2208      	moveq	r2, #8
 80052fa:	2100      	movs	r1, #0
 80052fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005300:	6865      	ldr	r5, [r4, #4]
 8005302:	60a5      	str	r5, [r4, #8]
 8005304:	2d00      	cmp	r5, #0
 8005306:	f2c0 8095 	blt.w	8005434 <_printf_i+0x20c>
 800530a:	6821      	ldr	r1, [r4, #0]
 800530c:	f021 0104 	bic.w	r1, r1, #4
 8005310:	6021      	str	r1, [r4, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d13d      	bne.n	8005392 <_printf_i+0x16a>
 8005316:	2d00      	cmp	r5, #0
 8005318:	f040 808e 	bne.w	8005438 <_printf_i+0x210>
 800531c:	4665      	mov	r5, ip
 800531e:	2a08      	cmp	r2, #8
 8005320:	d10b      	bne.n	800533a <_printf_i+0x112>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	07db      	lsls	r3, r3, #31
 8005326:	d508      	bpl.n	800533a <_printf_i+0x112>
 8005328:	6923      	ldr	r3, [r4, #16]
 800532a:	6862      	ldr	r2, [r4, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	bfde      	ittt	le
 8005330:	2330      	movle	r3, #48	; 0x30
 8005332:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005336:	f105 35ff 	addle.w	r5, r5, #4294967295
 800533a:	ebac 0305 	sub.w	r3, ip, r5
 800533e:	6123      	str	r3, [r4, #16]
 8005340:	f8cd 8000 	str.w	r8, [sp]
 8005344:	463b      	mov	r3, r7
 8005346:	aa03      	add	r2, sp, #12
 8005348:	4621      	mov	r1, r4
 800534a:	4630      	mov	r0, r6
 800534c:	f7ff fef6 	bl	800513c <_printf_common>
 8005350:	3001      	adds	r0, #1
 8005352:	d14d      	bne.n	80053f0 <_printf_i+0x1c8>
 8005354:	f04f 30ff 	mov.w	r0, #4294967295
 8005358:	b005      	add	sp, #20
 800535a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800535e:	4839      	ldr	r0, [pc, #228]	; (8005444 <_printf_i+0x21c>)
 8005360:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005364:	6813      	ldr	r3, [r2, #0]
 8005366:	6821      	ldr	r1, [r4, #0]
 8005368:	1d1d      	adds	r5, r3, #4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6015      	str	r5, [r2, #0]
 800536e:	060a      	lsls	r2, r1, #24
 8005370:	d50b      	bpl.n	800538a <_printf_i+0x162>
 8005372:	07ca      	lsls	r2, r1, #31
 8005374:	bf44      	itt	mi
 8005376:	f041 0120 	orrmi.w	r1, r1, #32
 800537a:	6021      	strmi	r1, [r4, #0]
 800537c:	b91b      	cbnz	r3, 8005386 <_printf_i+0x15e>
 800537e:	6822      	ldr	r2, [r4, #0]
 8005380:	f022 0220 	bic.w	r2, r2, #32
 8005384:	6022      	str	r2, [r4, #0]
 8005386:	2210      	movs	r2, #16
 8005388:	e7b7      	b.n	80052fa <_printf_i+0xd2>
 800538a:	064d      	lsls	r5, r1, #25
 800538c:	bf48      	it	mi
 800538e:	b29b      	uxthmi	r3, r3
 8005390:	e7ef      	b.n	8005372 <_printf_i+0x14a>
 8005392:	4665      	mov	r5, ip
 8005394:	fbb3 f1f2 	udiv	r1, r3, r2
 8005398:	fb02 3311 	mls	r3, r2, r1, r3
 800539c:	5cc3      	ldrb	r3, [r0, r3]
 800539e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80053a2:	460b      	mov	r3, r1
 80053a4:	2900      	cmp	r1, #0
 80053a6:	d1f5      	bne.n	8005394 <_printf_i+0x16c>
 80053a8:	e7b9      	b.n	800531e <_printf_i+0xf6>
 80053aa:	6813      	ldr	r3, [r2, #0]
 80053ac:	6825      	ldr	r5, [r4, #0]
 80053ae:	6961      	ldr	r1, [r4, #20]
 80053b0:	1d18      	adds	r0, r3, #4
 80053b2:	6010      	str	r0, [r2, #0]
 80053b4:	0628      	lsls	r0, r5, #24
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	d501      	bpl.n	80053be <_printf_i+0x196>
 80053ba:	6019      	str	r1, [r3, #0]
 80053bc:	e002      	b.n	80053c4 <_printf_i+0x19c>
 80053be:	066a      	lsls	r2, r5, #25
 80053c0:	d5fb      	bpl.n	80053ba <_printf_i+0x192>
 80053c2:	8019      	strh	r1, [r3, #0]
 80053c4:	2300      	movs	r3, #0
 80053c6:	6123      	str	r3, [r4, #16]
 80053c8:	4665      	mov	r5, ip
 80053ca:	e7b9      	b.n	8005340 <_printf_i+0x118>
 80053cc:	6813      	ldr	r3, [r2, #0]
 80053ce:	1d19      	adds	r1, r3, #4
 80053d0:	6011      	str	r1, [r2, #0]
 80053d2:	681d      	ldr	r5, [r3, #0]
 80053d4:	6862      	ldr	r2, [r4, #4]
 80053d6:	2100      	movs	r1, #0
 80053d8:	4628      	mov	r0, r5
 80053da:	f7fa ff41 	bl	8000260 <memchr>
 80053de:	b108      	cbz	r0, 80053e4 <_printf_i+0x1bc>
 80053e0:	1b40      	subs	r0, r0, r5
 80053e2:	6060      	str	r0, [r4, #4]
 80053e4:	6863      	ldr	r3, [r4, #4]
 80053e6:	6123      	str	r3, [r4, #16]
 80053e8:	2300      	movs	r3, #0
 80053ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ee:	e7a7      	b.n	8005340 <_printf_i+0x118>
 80053f0:	6923      	ldr	r3, [r4, #16]
 80053f2:	462a      	mov	r2, r5
 80053f4:	4639      	mov	r1, r7
 80053f6:	4630      	mov	r0, r6
 80053f8:	47c0      	blx	r8
 80053fa:	3001      	adds	r0, #1
 80053fc:	d0aa      	beq.n	8005354 <_printf_i+0x12c>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	079b      	lsls	r3, r3, #30
 8005402:	d413      	bmi.n	800542c <_printf_i+0x204>
 8005404:	68e0      	ldr	r0, [r4, #12]
 8005406:	9b03      	ldr	r3, [sp, #12]
 8005408:	4298      	cmp	r0, r3
 800540a:	bfb8      	it	lt
 800540c:	4618      	movlt	r0, r3
 800540e:	e7a3      	b.n	8005358 <_printf_i+0x130>
 8005410:	2301      	movs	r3, #1
 8005412:	464a      	mov	r2, r9
 8005414:	4639      	mov	r1, r7
 8005416:	4630      	mov	r0, r6
 8005418:	47c0      	blx	r8
 800541a:	3001      	adds	r0, #1
 800541c:	d09a      	beq.n	8005354 <_printf_i+0x12c>
 800541e:	3501      	adds	r5, #1
 8005420:	68e3      	ldr	r3, [r4, #12]
 8005422:	9a03      	ldr	r2, [sp, #12]
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	42ab      	cmp	r3, r5
 8005428:	dcf2      	bgt.n	8005410 <_printf_i+0x1e8>
 800542a:	e7eb      	b.n	8005404 <_printf_i+0x1dc>
 800542c:	2500      	movs	r5, #0
 800542e:	f104 0919 	add.w	r9, r4, #25
 8005432:	e7f5      	b.n	8005420 <_printf_i+0x1f8>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1ac      	bne.n	8005392 <_printf_i+0x16a>
 8005438:	7803      	ldrb	r3, [r0, #0]
 800543a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800543e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005442:	e76c      	b.n	800531e <_printf_i+0xf6>
 8005444:	08005b81 	.word	0x08005b81
 8005448:	08005b92 	.word	0x08005b92

0800544c <_sbrk_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4c06      	ldr	r4, [pc, #24]	; (8005468 <_sbrk_r+0x1c>)
 8005450:	2300      	movs	r3, #0
 8005452:	4605      	mov	r5, r0
 8005454:	4608      	mov	r0, r1
 8005456:	6023      	str	r3, [r4, #0]
 8005458:	f7fb ff28 	bl	80012ac <_sbrk>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d102      	bne.n	8005466 <_sbrk_r+0x1a>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	b103      	cbz	r3, 8005466 <_sbrk_r+0x1a>
 8005464:	602b      	str	r3, [r5, #0]
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	200001e8 	.word	0x200001e8

0800546c <__sread>:
 800546c:	b510      	push	{r4, lr}
 800546e:	460c      	mov	r4, r1
 8005470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005474:	f000 f896 	bl	80055a4 <_read_r>
 8005478:	2800      	cmp	r0, #0
 800547a:	bfab      	itete	ge
 800547c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800547e:	89a3      	ldrhlt	r3, [r4, #12]
 8005480:	181b      	addge	r3, r3, r0
 8005482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005486:	bfac      	ite	ge
 8005488:	6563      	strge	r3, [r4, #84]	; 0x54
 800548a:	81a3      	strhlt	r3, [r4, #12]
 800548c:	bd10      	pop	{r4, pc}

0800548e <__swrite>:
 800548e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005492:	461f      	mov	r7, r3
 8005494:	898b      	ldrh	r3, [r1, #12]
 8005496:	05db      	lsls	r3, r3, #23
 8005498:	4605      	mov	r5, r0
 800549a:	460c      	mov	r4, r1
 800549c:	4616      	mov	r6, r2
 800549e:	d505      	bpl.n	80054ac <__swrite+0x1e>
 80054a0:	2302      	movs	r3, #2
 80054a2:	2200      	movs	r2, #0
 80054a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a8:	f000 f868 	bl	800557c <_lseek_r>
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054b6:	81a3      	strh	r3, [r4, #12]
 80054b8:	4632      	mov	r2, r6
 80054ba:	463b      	mov	r3, r7
 80054bc:	4628      	mov	r0, r5
 80054be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054c2:	f000 b817 	b.w	80054f4 <_write_r>

080054c6 <__sseek>:
 80054c6:	b510      	push	{r4, lr}
 80054c8:	460c      	mov	r4, r1
 80054ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ce:	f000 f855 	bl	800557c <_lseek_r>
 80054d2:	1c43      	adds	r3, r0, #1
 80054d4:	89a3      	ldrh	r3, [r4, #12]
 80054d6:	bf15      	itete	ne
 80054d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80054da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054e2:	81a3      	strheq	r3, [r4, #12]
 80054e4:	bf18      	it	ne
 80054e6:	81a3      	strhne	r3, [r4, #12]
 80054e8:	bd10      	pop	{r4, pc}

080054ea <__sclose>:
 80054ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ee:	f000 b813 	b.w	8005518 <_close_r>
	...

080054f4 <_write_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4c07      	ldr	r4, [pc, #28]	; (8005514 <_write_r+0x20>)
 80054f8:	4605      	mov	r5, r0
 80054fa:	4608      	mov	r0, r1
 80054fc:	4611      	mov	r1, r2
 80054fe:	2200      	movs	r2, #0
 8005500:	6022      	str	r2, [r4, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	f7fb fdcc 	bl	80010a0 <_write>
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d102      	bne.n	8005512 <_write_r+0x1e>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	b103      	cbz	r3, 8005512 <_write_r+0x1e>
 8005510:	602b      	str	r3, [r5, #0]
 8005512:	bd38      	pop	{r3, r4, r5, pc}
 8005514:	200001e8 	.word	0x200001e8

08005518 <_close_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4c06      	ldr	r4, [pc, #24]	; (8005534 <_close_r+0x1c>)
 800551c:	2300      	movs	r3, #0
 800551e:	4605      	mov	r5, r0
 8005520:	4608      	mov	r0, r1
 8005522:	6023      	str	r3, [r4, #0]
 8005524:	f7fb fde8 	bl	80010f8 <_close>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_close_r+0x1a>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	b103      	cbz	r3, 8005532 <_close_r+0x1a>
 8005530:	602b      	str	r3, [r5, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	200001e8 	.word	0x200001e8

08005538 <_fstat_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4c07      	ldr	r4, [pc, #28]	; (8005558 <_fstat_r+0x20>)
 800553c:	2300      	movs	r3, #0
 800553e:	4605      	mov	r5, r0
 8005540:	4608      	mov	r0, r1
 8005542:	4611      	mov	r1, r2
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	f7fb fe27 	bl	8001198 <_fstat>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	d102      	bne.n	8005554 <_fstat_r+0x1c>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	b103      	cbz	r3, 8005554 <_fstat_r+0x1c>
 8005552:	602b      	str	r3, [r5, #0]
 8005554:	bd38      	pop	{r3, r4, r5, pc}
 8005556:	bf00      	nop
 8005558:	200001e8 	.word	0x200001e8

0800555c <_isatty_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	4c06      	ldr	r4, [pc, #24]	; (8005578 <_isatty_r+0x1c>)
 8005560:	2300      	movs	r3, #0
 8005562:	4605      	mov	r5, r0
 8005564:	4608      	mov	r0, r1
 8005566:	6023      	str	r3, [r4, #0]
 8005568:	f7fb fd84 	bl	8001074 <_isatty>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_isatty_r+0x1a>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	b103      	cbz	r3, 8005576 <_isatty_r+0x1a>
 8005574:	602b      	str	r3, [r5, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	200001e8 	.word	0x200001e8

0800557c <_lseek_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4c07      	ldr	r4, [pc, #28]	; (800559c <_lseek_r+0x20>)
 8005580:	4605      	mov	r5, r0
 8005582:	4608      	mov	r0, r1
 8005584:	4611      	mov	r1, r2
 8005586:	2200      	movs	r2, #0
 8005588:	6022      	str	r2, [r4, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	f7fb fdcb 	bl	8001126 <_lseek>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_lseek_r+0x1e>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	b103      	cbz	r3, 800559a <_lseek_r+0x1e>
 8005598:	602b      	str	r3, [r5, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	200001e8 	.word	0x200001e8

080055a0 <__malloc_lock>:
 80055a0:	4770      	bx	lr

080055a2 <__malloc_unlock>:
 80055a2:	4770      	bx	lr

080055a4 <_read_r>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4c07      	ldr	r4, [pc, #28]	; (80055c4 <_read_r+0x20>)
 80055a8:	4605      	mov	r5, r0
 80055aa:	4608      	mov	r0, r1
 80055ac:	4611      	mov	r1, r2
 80055ae:	2200      	movs	r2, #0
 80055b0:	6022      	str	r2, [r4, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	f7fb fdc8 	bl	8001148 <_read>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d102      	bne.n	80055c2 <_read_r+0x1e>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	b103      	cbz	r3, 80055c2 <_read_r+0x1e>
 80055c0:	602b      	str	r3, [r5, #0]
 80055c2:	bd38      	pop	{r3, r4, r5, pc}
 80055c4:	200001e8 	.word	0x200001e8

080055c8 <_init>:
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	bf00      	nop
 80055cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ce:	bc08      	pop	{r3}
 80055d0:	469e      	mov	lr, r3
 80055d2:	4770      	bx	lr

080055d4 <_fini>:
 80055d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d6:	bf00      	nop
 80055d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055da:	bc08      	pop	{r3}
 80055dc:	469e      	mov	lr, r3
 80055de:	4770      	bx	lr
